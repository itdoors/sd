<?php

namespace ITDoors\PayMasterBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PayMasterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PayMasterRepository extends EntityRepository
{
    /**
     * Returns results for interval future invoice
     *
     * @param string $tab
     * 
     * @return QueryBuilder
     */
    public function forTab ($tab)
    {
        $sql = $this->createQueryBuilder('p');
        $sqlCount = $this->createQueryBuilder('p');
        $sqlCount->select('COUNT(p.id)');

        switch ($tab) {
            case 'new':
                $sql->andWhere('p.paymentDate is NULL');
                $sqlCount->andWhere('p.paymentDate is NULL');
                $sql->andWhere('p.isRejected is NULL');
                $sqlCount->andWhere('p.isRejected is NULL');
                break;
            case 'urgent':
                $date = new \DateTime();
                $sql->andWhere('p.expectedDate <= :date')
                    ->setParameter(':date', $date);
                $sqlCount->andWhere('p.expectedDate <= :date')
                    ->setParameter(':date', $date);
                $sql->andWhere('p.paymentDate is NULL');
                $sqlCount->andWhere('p.paymentDate is NULL');
                $sql->andWhere('p.isRejected != true');
                $sqlCount->andWhere('p.isRejected != true');
                break;
            case 'payment':
                $sql->andWhere('p.paymentDate is NULL');
                $sqlCount->andWhere('p.paymentDate is NULL');
                $sql->andWhere('p.isRejected = false');
                $sqlCount->andWhere('p.isRejected = false');
                break;
            case 'sponsored':
                $sql->andWhere('p.paymentDate is not NULL');
                $sqlCount->andWhere('p.paymentDate is not NULL');
                break;
            case 'rejected':
                $sql->andWhere('p.isRejected = true');
                $sqlCount->andWhere('p.isRejected = true');
                break;
        }
        $count = $sqlCount->getQuery()->getSingleScalarResult();
        $query = $sql->getQuery();
        $query->setHint('knp_paginator.count', $count);

        return $query;
    }
}
