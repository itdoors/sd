<?php

namespace ITDoors\ControllingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{
    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function selectInvoiceSum (QueryBuilder $res)
    {
        $res
            ->select('SUM(case when detals_summ.summa is not NULL then detals_summ.summa else 0 end)'
                . '-'
                . 'SUM(case when psum.summa is not NULL then psum.summa else 0 end) as summa'
            )
            ->leftJoin('i.acts', 'acts_summ')
            ->leftJoin('acts_summ.detals', 'detals_summ')
            ->leftJoin('i.payments', 'psum');

        return $res;
    }
    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function selectPaySum (QueryBuilder $res)
    {
        $res->select('SUM(pss.summa) as summa')
            ->leftJoin('i.payments', 'pss');

        return $res;
    }
    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function selectInvoicePeriod (QueryBuilder $res)
    {
        $res
            ->select('i.sum')
            ->addSelect('i.court')
            ->addSelect('i.id')
            ->addSelect('i.invoiceId')
            ->addSelect('i.date')
            ->addSelect('i.bank')
            ->addSelect('i.delayDate')
            ->addSelect('i.delayDays')
            ->addSelect('i.delayDaysType')
            ->addSelect('i.dateEnd')
            ->addSelect('i.dateFact')
            ->addSelect(
                "array_to_string(
                  ARRAY(
                          SELECT
                            cs.name
                          FROM
                            ITDoorsControllingBundle:InvoiceCompanystructure ics
                          LEFT JOIN ics.companystructure  cs
                          WHERE ics.invoiceId = i.id
                      ), ','
                 ) as responsibles"
            )
            ->addSelect(
                "array_to_string(
                  ARRAY(
                          SELECT
                            i_actN.number
                          FROM
                            ITDoorsControllingBundle:InvoiceAct i_actN
                          WHERE i_actN.invoiceId = i.id
                      ), ','
                 ) as actNumbers"
            )
            ->addSelect(
                "array_to_string(
                  ARRAY(
                          SELECT
                            i_actD.date
                          FROM
                            ITDoorsControllingBundle:InvoiceAct i_actD
                          WHERE i_actD.invoiceId = i.id
                      ), ','
                 ) as actDates"
            )
            ->addSelect(
                "array_to_string(
                  ARRAY(
                          SELECT
                            i_actO.original
                          FROM
                            ITDoorsControllingBundle:InvoiceAct i_actO
                          WHERE i_actO.invoiceId = i.id
                      ), ','
                 ) as actOriginals"
            )
            ->addSelect(
                "array_to_string(
                  ARRAY(
                        SELECT
                            SUM(iad.summa)
                        FROM
                            ITDoorsControllingBundle:InvoiceAct i_act1
                        LEFT JOIN i_act1.detals iad
                        WHERE i_act1.invoiceId = i.id
                      ), ','
                 ) as sumActs"
            )
            ->addSelect(
                "("
                . "SELECT SUM(paymens.summa)"
                . " FROM  ITDoorsControllingBundle:InvoicePayments paymens"
                . " WHERE paymens.invoiceId = i.id"
                . ") as paymentsSumma"
            )
            ->addSelect('customer.name as customerName')
            ->addSelect('i.customerId as invoiceCustomerId')
            ->addSelect('i.customerName as invoiceCustomerName')
            ->addSelect('performer.name as performerName')
            ->addSelect('r.name as regionName')
            ->addSelect('d.number as dogovorNumber')
            ->addSelect('i.dogovorNumber as dogNumber')
            ->addSelect('d.startdatetime as dogovorStartDatetime')
            ->addSelect('i.dogovorDate as invoiceDogovorDate')
            ->addSelect('h.note as description')
            ->addSelect('h.createdate as descriptiondate');

        return $res;
    }
    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function selectInvoicePeriodCount (QueryBuilder $res)
    {
        $res->select('COUNT(i.id)');

        return $res;
    }
    /**
     * Returns results for interval future invoice
     * 
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function joinInvoicePeriod (QueryBuilder $res)
    {
        $subQuery = '
          SELECT max(h2.id)
            FROM
          ITDoorsControllingBundle:InvoiceMessage AS h2
            WHERE h2.invoiceId = i.id';

        $res
            ->leftJoin('i.dogovor', 'd')
            ->leftJoin('i.customer', 'customer')
            ->leftJoin('i.performer', 'performer')
            ->leftJoin('performer.city', 'c')
            ->leftJoin('c.region', 'r')
            ->leftJoin('i.messages', 'h')
            ->andWhere("h.id = ({$subQuery})  OR h.id is NULL");

        return $res;
    }
    /**
     * Returns results for interval future invoice
     * 
     * @param QueryBuilder  $res
     * @param integer       $periodmin
     * @param integer       $periodmax
     * 
     * @return QueryBuilder
     */
    public function whereInvoicePeriod (QueryBuilder $res, $periodmin, $periodmax)
    {
        $date = date('Y-m-d');
        $res
            ->andWhere(":date -  i.delayDate >= :periodmin");
        if ($periodmax != 0) {
            $res->andWhere(':date -  i.delayDate <= :periodmax')
                ->setParameter(':periodmax', $periodmax);
        }

        return $res->setParameter(':periodmin', $periodmin)
            ->setParameter(':date', $date)
            ->andWhere("i.dateFact is NULL")
            ->andWhere("(i.court is NULL OR i.court = '0')");
    }
    /**
     * Processes sql query depending on filters
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     * @param mixed[]                    $filters
     */
    public function processFilters (\Doctrine\ORM\QueryBuilder $sql, $filters)
    {
        if (sizeof($filters)) {

            foreach ($filters as $key => $value) {
                if (!$value) {
                    continue;
                }
                switch ($key) {
                    case 'customer':
                        $arr = explode(',', $value);
                        $sql->andWhere("customer.id in (:customerIds)");
                        $sql->setParameter(':customerIds', $arr);
                        break;
                    case 'performer':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->andWhere('performer.id in (:performerIds)');
                        $sql->setParameter(':performerIds', $arr);
                        break;
                    case 'invoiceId':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->andWhere('i.id in (:ids)');
                        $sql->setParameter(':ids', $arr);
                        break;
                    case 'actNumber':
                        $arr = explode(',', $value);
                        $sql->innerJoin('i.acts', 'i_act_number');
                        $sql->andWhere("i_act_number.number in (:actNumbers)");
                        $sql->setParameter(':actNumbers', $arr);
                        break;
                    case 'companystructure':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->leftJoin('i.invoicecompanystructure', 'ics_fil');
                        $sql->leftJoin('ics_fil.companystructure', 'cs_fil');
                        $sql->andWhere("cs_fil.id in (:companystructures)");
                        $sql->setParameter(':companystructures', $arr);
                        break;
                    case 'daterange':
                        $daterange = explode('-', $value);
                        $from = new \DateTime($daterange[0]);
                        $to = new \DateTime($daterange[1]);
                        $sql->andWhere('i.delayDate BETWEEN :dateFrom AND :dateTo')
                            ->setParameter(':dateFrom', $from)
                            ->setParameter(':dateTo', $to);
                        break;
                }
            }
        }
    }
    /**
     * Processes sql query depending on filters
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     * @param mixed[]                    $filters
     */
    public function processFiltersJoin (\Doctrine\ORM\QueryBuilder $sql, $filters)
    {
        if (sizeof($filters)) {

            foreach ($filters as $key => $value) {
                if (!$value) {
                    continue;
                }
                switch ($key) {
                    case 'customer':
                        $arr = explode(',', $value);
                        $sql->andWhere("customer.id in (:customerIds)");
                        $sql->setParameter(':customerIds', $arr);
                        break;
                    case 'performer':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->leftJoin('i.performer', 'performer');
                        $sql->andWhere('performer.id in (:performerIds)');
                        $sql->setParameter(':performerIds', $arr);
                        break;
                    case 'invoiceId':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->andWhere('i.id in (:ids)');
                        $sql->setParameter(':ids', $arr);
                        break;
                    case 'actNumber':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->innerJoin('i.acts', 'act_n');
                        $sql->andWhere("act_n.number in (:actNumbers)");
                        $sql->setParameter(':actNumbers', $arr);
                        break;
                    case 'companystructure':
                        if (isset($value[0]) && !$value[0]) {
                            break;
                        }
                        $arr = explode(',', $value);
                        $sql->leftJoin('i.invoicecompanystructure', 'ics_fil');
                        $sql->leftJoin('ics_fil.companystructure', 'cs_fil');
                        $sql->andWhere("cs_fil.id in (:companystructures)");
                        $sql->setParameter(':companystructures', $arr);
                        break;
                }
            }
        }
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $periodmin
     * @param integer $periodmax
     * @param array   $filters
     * @param integer $companystryctyre
     *
     * @return mixed[]
     */
    public function getInvoicePeriod ($periodmin, $periodmax, $filters, $companystryctyre)
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $this->whereInvoicePeriod($res, $periodmin, $periodmax);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($res, $filters);

        return $res
                ->orderBy('i.customerName', 'ASC')->getQuery();
    }
    /**
     * Returns results for interval future invoice
     * 
     * @param array   $filters
     * @param integer $companystryctyre
     *
     * @return mixed[]
     */
    public function getAll ($filters, $companystryctyre = null)
    {
        if (!sizeof($filters)) {
            return array();
        }
        $invoices = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($invoices);
        /** join */
        $this->joinInvoicePeriod($invoices);

        if ($companystryctyre) {
            $invoices
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($invoices, $filters);

        $res = $invoices
            ->orderBy('i.customerName', 'ASC')
            ->orderBy('i.date', 'ASC')
            ->getQuery()->getResult();

        if (!sizeof($res)) {
            return array();
        }

        $result = array();
        foreach ($res as $invoice) {
            if (!isset ( $result[$invoice['invoiceCustomerId']] )) {
                $result[$invoice['invoiceCustomerId']] = [];
                $result[$invoice['invoiceCustomerId']]['customer'] = [];
                $result[$invoice['invoiceCustomerId']]['customer']['name'] = $invoice['customerName'];
                $result[$invoice['invoiceCustomerId']]['customer']['debtSum'] = 0;
                $result[$invoice['invoiceCustomerId']]['customer']['paySum'] = 0;
                $result[$invoice['invoiceCustomerId']]['customer']['days'] = 0;
                $result[$invoice['invoiceCustomerId']]['customer']['lastDebt'] = 0;
                $result[$invoice['invoiceCustomerId']]['invoices'] = [];
            }
            $date = $invoice['dateFact'] != '' ? $invoice['dateFact']->format('U') : date('U');
            $invoice['days'] = floor(($date-$invoice['delayDate']->format('U'))/86400);
            $invoice['days'] = $invoice['days'] <= 0 ? 0 : $invoice['days'];
            $result[$invoice['invoiceCustomerId']]['invoices'][] = $invoice;
            $result[$invoice['invoiceCustomerId']]['customer']['debtSum'] += $invoice['sumActs'];
            $result[$invoice['invoiceCustomerId']]['customer']['paySum'] += $invoice['paymentsSumma'];
            $result[$invoice['invoiceCustomerId']]['customer']['days'] += $invoice['days'];
            $result[$invoice['invoiceCustomerId']]['customer']['lastDebt'] +=
                ($invoice['sumActs']-$invoice['paymentsSumma']);
        }

        return $result;
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array $invoiceIds
     *
     * @return mixed[]
     */
    public function getInvoiceIds ($invoiceIds)
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($res);
        $res->addSelect('i.dogovorNumber');
        $res->addSelect('i.dogovorDate')
            ->addSelect('i.performerName');
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $res->andWhere('i.id in (:ids)')
            ->setParameter(':ids', $invoiceIds);

        return $res
                ->orderBy('i.performerEdrpou', 'DESC')->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     * 
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getForExel ($companystryctyre)
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }

        $date = date('Y-m-d', time() - 2592000);
        $res
            ->andWhere("i.dateFact >= :date or i.dateFact is NULL")
            ->setParameter(':date', $date);

        return $res
                ->orderBy('i.customer')
                ->getQuery()
                ->getResult();
    }
    /**
     * Returns results for interval future invoice
     * 
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getForExelNoDogovor ($companystryctyre)
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }

        $date = date('Y-m-d', time() - 2592000);
        $res
            ->andWhere("i.dogovorId is NULL")
            ->andWhere("i.dateFact >= :date or i.dateFact is NULL")
            ->setParameter(':date', $date);

        return $res
                ->orderBy('i.customer')
                ->getQuery()
                ->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $periodmin
     * @param integer $periodmax
     * @param array   $filters
     * @param integer $companystryctyre
     *
     * @return integer count
     */
    public function getInvoicePeriodCount ($periodmin, $periodmax, $filters, $companystryctyre)
    {
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** where */
        $this->whereInvoicePeriod($rescount, $periodmin, $periodmax);

        /** join */
        $this->joinInvoicePeriod($rescount);
        if ($companystryctyre) {
            $rescount
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($rescount, $filters);

        return $rescount
                ->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     *
     * @return integer count
     */
    public function getAllCount ($filters, $companystryctyre)
    {
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);

        /** join */
        $this->joinInvoicePeriod($rescount);
        if ($companystryctyre) {
            $rescount
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($rescount, $filters);

        return $rescount
                ->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @return mixed[]
     */
    public function getInvoiceListForDashboard ()
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $res->andWhere('i.delayDays is NULL or i.delayDays = 0');

        return $res
                ->orderBy('i.delayDate', 'DESC')->getQuery();
    }
    /**
     * Returns results for interval future invoice
     * 
     * @return integer count
     */
    public function getInvoiceListForDashboardCount ()
    {
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** where */
        $rescount->andWhere('i.delayDays is NULL or i.delayDays = 0');

        return $rescount
                ->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $periodmin
     * @param integer $periodmax
     * @param integer $companystryctyre
     * @param array   $filters
     *
     * @return float summa
     */
    public function getInvoicePeriodSum ($periodmin, $periodmax, $companystryctyre, $filters = null)
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoiceSum($res);

        $this->joinInvoicePeriod($res);

        $this->processFilters($res, $filters);

        /** where */
        $this->whereInvoicePeriod($res, $periodmin, $periodmax);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }

        return $res->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param date $date
     *
     * @return float summa
     */
    public function getSumma ($date)
    {
        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoiceSum($res);
        /** where */
        $res->andWhere(":date  = i.dateEnd or i.delayDate = :date")
            ->setParameter(':date', $date)
            ->andWhere("i.dateFact is NULL");

        return $res->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceCourt ($filters, $companystryctyre)
    {
        $id = 1;

        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        if ($companystryctyre) {
            $res->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($res, $filters);

        return $res
                ->andWhere("i.court = :id")
                ->setParameter(':id', $id)
                ->orderBy('i.customerName', 'ASC')
                ->getQuery();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $companystryctyre
     * @param array   $filters
     * 
     * @return mixed[]
     */
    public function getInvoiceCourtSum ($companystryctyre, $filters = null)
    {
        $id = 1;

        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoiceSum($res);
        /** join */
        $this->joinInvoicePeriod($res);

        $this->processFilters($res, $filters);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }

        return $res
                ->andWhere("i.court = :id")
                ->setParameter(':id', $id)->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return integer count
     */
    public function getInvoiceCourtCount ($filters, $companystryctyre)
    {
        $id = 1;

        $rescount = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** join */
        $this->joinInvoicePeriod($rescount);
        if ($companystryctyre) {
            $rescount
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($rescount, $filters);

        return $rescount
                ->andWhere("i.court = :id")
                ->setParameter(':id', $id)
                ->getQuery()
                ->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoicePay ($filters, $companystryctyre)
    {
        $date = date('Y-m-d', time() - 2592000);
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $this->processFilters($res, $filters);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $res->andWhere("i.dateFact is not NULL")
            ->andWhere("i.dateFact >= :date")->setParameter(':date', $date)
            ->orderBy('i.customerName', 'ASC');

        return $res->getQuery();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceFlow ($filters, $companystryctyre)
    {
        $date = date('Y-m-d');
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $this->processFilters($res, $filters);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $res
            ->andWhere("i.dateFact is NULL")
            ->andWhere("i.delayDate >= :date")->setParameter(':date', $date)
            ->orderBy('i.customerName', 'ASC');

        return $res->getQuery();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param string  $type
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceEmptyData ($type, $companystryctyre)
    {
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        /** where */
        switch ($type) {
            case 'delay':
                $res = $res->andWhere("i.delayDays is NULL or i.delayDays = 0")
                    ->andWhere("i.dateFact is NULL")
                    ->orderBy('performerName, i.id', 'DESC');
                break;
            case 'act':
                $res = $res
                ->andWhere(
                    "i.id in (
                        SELECT iao.id
                        FROM ITDoorsControllingBundle:Invoice iao
                        INNER JOIN ITDoorsControllingBundle:InvoiceAct ia
                        WHERE iao.id = ia.invoiceId
                        AND ia.original = false
                    )"
                )
                ->andWhere("i.dateFact is NULL")
                ->orderBy('performerName, i.id', 'DESC');
                break;
            case 'dogovor':
                $res = $res->andWhere("i.dogovorId is NULL")
                    ->andWhere("i.dateFact is NULL")
                    ->orderBy('performerName, i.id', 'DESC');
                break;
        }

        return $res->getQuery();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param string  $type
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceEmptyDataCount ($type, $companystryctyre)
    {
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriodCount($res);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        /** where */
        switch ($type) {
            case 'delay':
                $res = $res
                 ->andWhere("i.dateFact is NULL")
                ->andWhere("i.delayDays is NULL or i.delayDays = 0");
                break;
            case 'act':
                $res = $res
                ->andWhere(
                    "i.id in (
                        SELECT iao.id 
                        FROM ITDoorsControllingBundle:Invoice iao
                        INNER JOIN ITDoorsControllingBundle:InvoiceAct ia
                        WHERE iao.id = ia.invoiceId
                        AND ia.original = :boolean
                    )"
                )
                ->andWhere("i.dateFact is NULL")
                ->setParameter(':boolean', false, \PDO::PARAM_BOOL);
                break;
            case 'dogovor':
                $res = $res->andWhere("i.dogovorId is NULL")
                    ->andWhere("i.dateFact is NULL");
                break;
        }

        return $res->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param date    $date
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceWhen ($date, $companystryctyre)
    {
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }

        return $res->andWhere("i.dateEnd = :date or i.delayDate = :date")
                ->setParameter(':date', $date)
                ->andWhere("i.dateFact is NULL")
                ->orderBy('i.dateEnd', 'DESC')
                ->getQuery();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $companystryctyre
     * @param mixed   $filters
     * 
     * @return mixed[]
     */
    public function getInvoicePaySum ($companystryctyre, $filters = null)
    {
        $date = date('Y-m-d', time() - 2592000);
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectPaySum($res);
        /** join */
        $this->joinInvoicePeriod($res);

        $this->processFilters($res, $filters);
        /** where */
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $res->andWhere("i.dateFact is not NULL")->andWhere("i.dateFact >= :date")->setParameter(':date', $date);

        return $res->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $companystryctyre
     * @param mixed   $filters
     *
     * @return mixed[]
     */
    public function getInvoiceFlowSum ($companystryctyre, $filters = null)
    {
        $date = date('Y-m-d');
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoiceSum($res);
        /** join */
        $this->joinInvoicePeriod($res);

        /** where */
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($res, $filters);

        $res->andWhere("i.dateFact is NULL")->andWhere("i.delayDate >= :date")->setParameter(':date', $date);

        return $res->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param integer $companystryctyre
     * @param mixed   $filters
     *
     * @return mixed[]
     */
    public function getInvoiceAllSum ($companystryctyre, $filters = null)
    {
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoiceSum($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        if ($companystryctyre) {
            $res
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $this->processFilters($res, $filters);
        $res->andWhere("i.dateFact is NULL");

        return $res->getQuery()->getResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoicePayCount ($filters, $companystryctyre)
    {
        $date = date('Y-m-d', time() - 2592000);
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** join */
        $this->joinInvoicePeriod($rescount);
        /** where */
        $this->processFilters($rescount, $filters);
        if ($companystryctyre) {
            $rescount
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $rescount
            ->andWhere("i.dateFact is not NULL")
            ->andWhere("i.dateFact >= :date")
            ->setParameter(':date', $date);

        return $rescount->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceFlowCount ($filters, $companystryctyre)
    {
        $date = date('Y-m-d');
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** join */
        $this->joinInvoicePeriod($rescount);
        /** where */
        $this->processFilters($rescount, $filters);
        if ($companystryctyre) {
            $rescount
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $rescount
            ->andWhere("i.dateFact is NULL")
            ->andWhere("i.delayDate >= :date")
            ->setParameter(':date', $date);

        return $rescount->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param date    $date
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getInvoiceWhenCount ($date, $companystryctyre)
    {
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** where */
        if ($companystryctyre) {
            $rescount
                ->leftJoin('i.invoicecompanystructure', 'i_ics')
                ->andWhere('i_ics.companystructureId = :companystructureId')
                ->setParameter(':companystructureId', $companystryctyre);
        }
        $rescount
            ->andWhere("i.dateEnd = :date or i.delayDate = :date")
            ->andWhere("i.dateFact is NULL")
            ->setParameter(':date', $date);

        return $rescount->getQuery()->getSingleScalarResult();
    }
    /**
     * Returns results for interval future invoice
     *
     * @param string  $period
     * @param array   $filters
     * @param integer $companystryctyre
     * 
     * @return mixed[]
     */
    public function getEntittyCountSum ($period, $filters, $companystryctyre)
    {
        $result = array ();
        switch ($period) {
            case 30:
                $result['entities'] = $this->getInvoicePeriod(1, 30, $filters, $companystryctyre);
                $result['count'] = $this->getInvoicePeriodCount(1, 30, $filters, $companystryctyre);
                break;
            case 60:
                $result['entities'] = $this->getInvoicePeriod(31, 60, $filters, $companystryctyre);
                $result['count'] = $this->getInvoicePeriodCount(31, 60, $filters, $companystryctyre);
                break;
            case 120:
                $result['entities'] = $this->getInvoicePeriod(61, 120, $filters, $companystryctyre);
                $result['count'] = $this->getInvoicePeriodCount(61, 120, $filters, $companystryctyre);
                break;
            case 180:
                $result['entities'] = $this->getInvoicePeriod(121, 180, $filters, $companystryctyre);
                $result['count'] = $this->getInvoicePeriodCount(121, 180, $filters, $companystryctyre);
                break;
            case 181:
                $result['entities'] = $this->getInvoicePeriod(181, 0, $filters, $companystryctyre);
                $result['count'] = $this->getInvoicePeriodCount(181, 0, $filters, $companystryctyre);
                break;
            case 'court':
                $result['entities'] = $this->getInvoiceCourt($filters, $companystryctyre);
                $result['count'] = $this->getInvoiceCourtCount($filters, $companystryctyre);
                break;
            case 'pay':
                $result['entities'] = $this->getInvoicePay($filters, $companystryctyre);
                $result['count'] = $this->getInvoicePayCount($filters, $companystryctyre);
                break;
            case 'flow':
                $result['entities'] = $this->getInvoiceFlow($filters, $companystryctyre);
                $result['count'] = $this->getInvoiceFlowCount($filters, $companystryctyre);
                break;
            case 'today':
                $date = date('Y-m-d');
                $result['entities'] = $this->getInvoiceWhen($date, $companystryctyre);
                $result['count'] = $this->getInvoiceWhenCount($date, $companystryctyre);
                break;
            case 'tomorrow':
                $date = date('Y-m-d', mktime(0, 0, 0, date("m"), date('d') + 1, date('Y')));
                $result['entities'] = $this->getInvoiceWhen($date, $companystryctyre);
                $result['count'] = $this->getInvoiceWhenCount($date, $companystryctyre);
                break;
            case 'delay':
                $result['entities'] = $this->getInvoiceEmptyData('delay', $companystryctyre);
                $result['count'] = $this->getInvoiceEmptyDataCount('delay', $companystryctyre);
                break;
            case 'act':
                $result['entities'] = $this->getInvoiceEmptyData('act', $companystryctyre);
                $result['count'] = $this->getInvoiceEmptyDataCount('act', $companystryctyre);
                break;
            case 'dogovor':
                $result['entities'] = $this->getInvoiceEmptyData('dogovor', $companystryctyre);
                $result['count'] = $this->getInvoiceEmptyDataCount('dogovor', $companystryctyre);
                break;
            case 'all':
                $result['entities'] = $this->getAll($filters, $companystryctyre);
                $result['count'] = $this->getAllCount($filters, $companystryctyre);
                break;
        }

        return $result;
    }
    /**
     * Returns results for interval future invoice
     *
     * @param array  $filters
     * 
     * @return mixed[]
     */
    public function getForAnalytic ($filters = array ())
    {
        $res = $this->createQueryBuilder('i')
            ->select('i.id')
            ->addSelect('i.sum as allSumma')
            ->addSelect('i.invoiceId')
            ->addSelect("i.date")
            ->addSelect('i.delayDate')
            ->addSelect(
                "("
                . "SELECT SUM(paymens.summa)"
                . " FROM  ITDoorsControllingBundle:InvoicePayments paymens"
                . " WHERE paymens.invoiceId = i.id"
                . ")as paymentsSumma"
            )
            ->addSelect('customer.name as customerName')
            ->addSelect('customer.id as customerId')
            ->leftJoin('i.customer', 'customer')
            ->orderBy('customer.name')
            ->addOrderBy('i.date');
        $resCount = $this->createQueryBuilder('i')
            ->select('COUNT(i.customerId)')
            ->leftJoin('i.customer', 'customer');

        $this->processFiltersJoin($res, $filters);
        $this->processFiltersJoin($resCount, $filters);
        $result['entities'] = $res->getQuery();
        $result['count'] = $resCount->getQuery()->getSingleScalarResult();

        return $result;
    }
    /**
     * Returns results for interval future invoice
     * 
     * @param integer $invoiceid Description
     * 
     * @param string  $tab       Description
     * 
     * @return mixed[]
     */
    public function getInfoForTab ($invoiceid, $tab)
    {
        $entitie = $this->createQueryBuilder('i');
        switch ($tab) {
            case 'act':
                $entitie
                    ->select('act.original')
                    ->addSelect('act.date')
                    ->addSelect('act.number')
                    ->addSelect('detal.note')
                    ->addSelect('detal.count')
                    ->addSelect('detal.summa')
                    ->addSelect('detal.mpk')
                    ->leftJoin('i.acts', 'act')
                    ->leftJoin('act.detals', 'detal')
                    ->where('i.id = :invoiceid')
                    ->setParameter(':invoiceid', $invoiceid);
                $entitie = $entitie->getQuery()
                    ->getResult();
                break;
            case 'invoice':
                $subQueryCase = '
                    CASE 
                    when customer.name is not NULL 
                    then customer.name 
                    else i.customerName end  as customerName';
                $subQueryCaseTwo = '
                    CASE 
                    when performer.name is not NULL
                    then performer.name 
                    else i.performerName end as performerName';

                $entitie
                    ->select('i.sum')
                    ->addSelect('i.id')
                    ->addSelect('i.bank')
                    ->addSelect('i.invoiceId')
                    ->addSelect('i.date ')
                    ->addSelect('i.dateEnd')
                    ->addSelect('i.dateFact')
                    ->addSelect('i.court')
                    ->addSelect("{$subQueryCase}")
                    ->addSelect("{$subQueryCaseTwo}")
                    ->leftJoin('i.dogovor', 'd')
                    ->leftJoin('d.customer', 'customer')
                    ->leftJoin('d.performer', 'performer')
                    ->where('i.id = :invoiceid')
                    ->setParameter(':invoiceid', (int) $invoiceid);
                $entitie = $entitie->getQuery()
                    ->getSingleResult();
                break;
            case 'contacts':
                $subQueryCase = $entitie->expr()->andx(
                    $entitie->expr()->eq('mc.modelId', 'customer.id'),
                    $entitie->expr()->orX(
                        $entitie->expr()->eq('mc.modelName', ':text'),
                        $entitie->expr()->eq('mc.modelName', ':textdepartments')
                    )
                );
                $subQuerySendEmail = $entitie->expr()->andx(
                    $entitie->expr()->eq('mc.id', 'mcsm.modelContactId')
                );
                $entitie
                    ->Select('mc.id as id')
                    ->addSelect('o.firstName as firstNameOwner')
                    ->addSelect('o.lastName as lastNameOwner')
                    ->addSelect('o.middleName as middleNameOwner')
                    ->addSelect('mc.firstName')
                    ->addSelect('mc.lastName')
                    ->addSelect('mc.middleName')
                    ->addSelect('mc.position')
                    ->addSelect('mc.phone1')
                    ->addSelect('mc.phone2')
                    ->addSelect('mc.email')
                    ->addSelect('mcsm.isSend')
                    ->addSelect('mcsm.id as idIsSend')
                    ->addSelect('mc.birthday')
                    ->addSelect('customer.id as customerId')
                    ->leftJoin('i.customer', 'customer')
                    ->leftJoin('Lists\ContactBundle\Entity\ModelContact', 'mc', 'WITH', $subQueryCase)
                    ->leftJoin('Lists\ContactBundle\Entity\ModelContactSendEmail', 'mcsm', 'WITH', $subQuerySendEmail)
                    ->leftJoin('mc.owner', 'o')
                    ->where('i.id = :invoiceid')
                    ->setParameter(':invoiceid', (int) $invoiceid)
                    ->setParameter(':text', 'organization')
                    ->setParameter(':textdepartments', 'departments');
                $entitie = $entitie->getQuery()
                    ->getResult();
                break;
            case 'dogovor':
                $entitie
                    ->Select('customer.name as customerName')
                    ->addSelect('performer.name as performerName')
                    ->addSelect('d.id')
                    ->addSelect('d.number')
                    ->addSelect('d.startdatetime')
                    ->addSelect('d.stopdatetime')
                    ->addSelect('d.prolongation')
                    ->addSelect('d.paymentDeferment')
                    ->addSelect('d.prolongationDate')
                    ->addSelect('d.isActive')
                    ->addSelect('d.subject')
                    ->addSelect('type.name as dogovorTypeId')
                    ->addSelect('d.filepath')
                    ->addSelect('i.dogovorName')
                    ->addSelect('i.dogovorDate')
                    ->addSelect('i.dogovorNumber')
                    ->addSelect('i.delayDays')
                    ->addSelect('i.customerName as customerName_1c')
                    ->addSelect('i.performerName as performerName_1c')
                    ->leftJoin('i.dogovor', 'd')
                    ->leftJoin('d.customer', 'customer')
                    ->leftJoin('d.performer', 'performer')
                    ->leftJoin('d.dogovorType', 'type')
                    ->where('i.id = :invoiceid')
                    ->setParameter(':invoiceid', (int) $invoiceid);
                $entitie = $entitie->getQuery()
                    ->getSingleResult();

                break;
            case 'responsible':
                $entitie
                    ->Select('c.name')
                    ->addSelect('ic.id')
                    ->addSelect('i.id as invoiceId')
                    ->leftJoin('i.invoicecompanystructure', 'ic')
                    ->leftJoin('ic.companystructure', 'c')
                    ->where('i.id = :invoiceid')
                    ->setParameter(':invoiceid', (int) $invoiceid)
                    ->orderBy('c.name');
                $entitie = $entitie->getQuery()
                    ->getResult();
                break;
            case 'customer':
                $entitie
                    ->Select('creator.lastName')
                    ->addSelect('creator.firstName')
                    ->addSelect('customer.createdatetime')
                    ->addSelect('customer.name as customerName')
                    ->addSelect(' i.customerName as customerName1c')
                    ->addSelect('customer.edrpou as customerEdrpou')
                    ->addSelect('i.customerEdrpou as customerEdrpou1c')
                    ->addSelect('customer.shortname')
                    ->addSelect('customer.address')
                    ->addSelect('customer.mailingAddress')
                    ->addSelect('customer.physicalAddress')
                    ->addSelect('customer.inn')
                    ->addSelect('customer.certificate')
                    ->addSelect('customer.shortDescription')
                    ->addSelect('customer.phone')
                    ->addSelect('customer.site')
                    ->addSelect('lookup.name as scope')
                    ->addSelect('c_city.name as cityName')
                    ->addSelect('type.title as customerType')
                    ->addSelect('c_group.name as groupName')
                    ->leftJoin('i.customer', 'customer')
                    ->leftJoin('customer.creator', 'creator')
                    ->leftJoin('customer.scope', 'lookup')
                    ->leftJoin('customer.organizationType', 'type')
                    ->leftJoin('customer.city', 'c_city')
                    ->leftJoin('customer.group', 'c_group')
                    ->where('i.id = :invoiceid')
                    ->setParameter(':invoiceid', (int) $invoiceid);
                $entitie = $entitie->getQuery()
                    ->getSingleResult();
                break;
            case 'payments':
                $entitie
                    ->Select('ip.summa')
                    ->addSelect('ip.date')
                    ->addSelect('ip.bank')
                    ->leftJoin('i.payments', 'ip')
                    ->where('i.id = :invoiceid')
                    ->andWhere('ip.summa is not NULL')
                    ->setParameter(':invoiceid', (int) $invoiceid)
                    ->orderBy('ip.date');
                $entitie = $entitie->getQuery()
                    ->getResult();
                break;
        }

        return $entitie;
    }
    /**
     * Searches organization by $q
     *
     * @param string $q
     *
     * @return mixed[]
     */
    public function getSearchInvoiceIdQuery ($q)
    {
        $sql = $this->createQueryBuilder('i')
            ->select('i.invoiceId')
            ->addSelect('i.id')
            ->where('lower(i.invoiceId) LIKE :q')
            ->setParameter(':q', '%' . mb_strtolower($q, 'UTF-8') . '%')
            ->getQuery();

        return $sql->getResult();
    }
    /**
     * @param integer $customerId
     * @param array   $filters
     *
     * @return mixed[]
     */
    public function getForCustomer ($customerId, $filters)
    {
        $sql = $this->createQueryBuilder('i')
            ->select('i.date')
            ->addSelect('i.delayDate')
            ->addSelect('i.sum')
            ->addSelect(
                "(
                SELECT SUM(paymens.summa)
                FROM  ITDoorsControllingBundle:InvoicePayments  paymens
                WHERE paymens.invoiceId = i.id
                AND i.delayDate >= paymens.date
                )as paymentsSumma"
            )
            ->where('i.customerId = :customerId')
            ->setParameter('customerId', $customerId);
        if (sizeof($filters)) {
            foreach ($filters as $key => $value) {
                if (!$value) {
                    continue;
                }
                switch ($key) {
                    case 'dateRange':
                        $dateArr = explode('-', $value);
                        $dateStart = new \DateTime(str_replace('.', '-', $dateArr[0]));
                        $dateStop = new \DateTime(str_replace('.', '-', $dateArr[1]));

                        $sql->andWhere('i.date BETWEEN :datestart AND :datestop')
                            ->setParameter(':datestart', $dateStart)
                            ->setParameter(':datestop', $dateStop);
                        break;
                }
            }
        }

        return $sql
                ->orderBy('i.date')
                ->getQuery()
                ->getResult();
    }
}
