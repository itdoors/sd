<?php

namespace ITDoors\ControllingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{

    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return mixed[]
     */
    public function selectInvoiceSum(QueryBuilder $res)
    {
        $res
            ->select('Sum(i.sum) as summa');

        return $res;
    }

    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return mixed[]
     */
    public function selectInvoicePeriod(QueryBuilder $res)
    {
        $res
            ->select('i.sum')
            ->addSelect('i.id')
            ->addSelect('i.invoiceId')
            ->addSelect('i.date ')
            ->addSelect('i.dogovorActName')
            ->addSelect('i.dogovorActDate')
            ->addSelect('i.delayDate')
            ->addSelect('i.delayDays')
            ->addSelect('i.delayDaysType')
            ->addSelect('i.dogovorActOriginal')
            ->addSelect('i.dateEnd')
            ->addSelect('i.dateFact')
            ->addSelect('customer.name as customerName')
            ->addSelect('performer.name as performerName')
            ->addSelect('r.name as regionName')
            ->addSelect('d.number as dogovorNumber')
            ->addSelect('d.startdatetime as dogovorStartDatetime')
            ->addSelect('h.note as description')
            ->addSelect('h.createdate as descriptiondate');

        return $res;
    }

    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return mixed[]
     */
    public function selectInvoicePeriodCount(QueryBuilder $res)
    {
        $res->select('COUNT(i.id)');

        return $res;
    }

    /**
     * Returns results for interval future invoice
     * 
     * @param QueryBuilder $res Description
     * 
     * @return mixed[]
     */
    public function joinInvoicePeriod(QueryBuilder $res)
    {
        $subQuery = '
          SELECT max(h2.id)
            FROM
          ITDoorsControllingBundle:InvoiceMessage AS h2
            WHERE h2.invoiceId = i.id';

        $res
            ->leftJoin('i.dogovor', 'd')
            ->leftJoin('d.customer', 'customer')
            ->leftJoin('d.performer', 'performer')
            ->leftJoin('performer.city', 'c')
            ->leftJoin('c.region', 'r')
            ->leftJoin('i.messages', 'h')
            ->andWhere("h.id = ({$subQuery})  OR h.id is NULL");

        return $res;
    }

    /**
     * Returns results for interval future invoice
     * 
     * @param QueryBuilder   $res
     * 
     * @param integer $periodmin
     * 
     * @param integer $periodmax
     * 
     * @return mixed[]
     */
    public function whereInvoicePeriod(QueryBuilder $res, $periodmin, $periodmax)
    {
        $date = date('Y-m-d');
        $res
            ->andWhere(":date -  i.delayDate >= :periodmin");
        if ($periodmax != 0) {
            $res->andWhere(':date -  i.delayDate <= :periodmax')
                ->setParameter(':periodmax', $periodmax);
        }

        $res = $res->setParameter(':periodmin', $periodmin)
            ->setParameter(':date', $date)
            ->andWhere("i.dateFact is NULL")
            ->andWhere("(i.court is NULL OR i.court = '0')");

        return $res;
    }

    /**
     * Returns results for interval future invoice
     *
     * @param int $periodmin Description
     * 
     * @param int $periodmax 0 - no restrictions
     *
     * @return mixed[]
     */
    public function getInvoicePeriod($periodmin, $periodmax)
    {

        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $this->whereInvoicePeriod($res, $periodmin, $periodmax);

        return $res
                ->orderBy('i.delayDate', 'DESC')->getQuery();
    }

    /**
     * Returns results for interval future invoice
     *
     * @param int $periodmin Description
     * 
     * @param int $periodmax 0 - no restrictions
     *
     * @return int count
     */
    public function getInvoicePeriodCount($periodmin, $periodmax)
    {

        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** where */
        $this->whereInvoicePeriod($rescount, $periodmin, $periodmax);

        return $rescount
                ->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns results for interval future invoice
     *
     * @param int $periodmin Description
     * 
     * @param int $periodmax 0 - no restrictions
     *
     * @return int count
     */
    public function getInvoicePeriodSum($periodmin, $periodmax)
    {

        $res = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoiceSum($res);
        /** where */
        $this->whereInvoicePeriod($res, $periodmin, $periodmax);

        return $res->getQuery()->getResult();
    }

    /**
     * Returns results for interval future invoice
     *
     * @return mixed[]
     */
    public function getInvoiceCourt()
    {
        $id = 1;

        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);

        return $res
                ->andWhere("i.court = :id")
                ->andWhere("i.dateFact is NULL")
                ->setParameter(':id', $id)->getQuery();
    }

    /**
     * Returns results for interval future invoice
     *
     * @return mixed[]
     */
    public function getInvoiceCourtSum()
    {
        $id = 1;

        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoiceSum($res);
        /** join */
        $this->joinInvoicePeriod($res);

        return $res
                ->andWhere("i.court = :id")
                ->andWhere("i.dateFact is NULL")
                ->setParameter(':id', $id)->getQuery()->getResult();
    }

    /**
     * Returns results for interval future invoice
     *
     * @return int count
     */
    public function getInvoiceCourtCount()
    {
        $id = 1;

        $rescount = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriodCount($rescount);

        return $rescount
                ->andWhere("i.court = :id")
                ->andWhere("i.dateFact is NULL")
                ->setParameter(':id', $id)
                ->getQuery()
                ->getSingleScalarResult();
    }

    /**
     * Returns results for interval future invoice
     *
     * @return mixed[]
     */
    public function getInvoicePay()
    {
        $date = date('Y-m-d', time() - 2592000);
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoicePeriod($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $res = $res->andWhere("i.dateFact is not NULL")
            ->andWhere("i.dateFact >= :date")->setParameter(':date', $date)
            ->orderBy('i.dateEnd', 'DESC');

        return $res->getQuery();
    }

    /**
     * Returns results for interval future invoice
     *
     * @return mixed[]
     */
    public function getInvoicePaySum()
    {
        $date = date('Y-m-d', time() - 2592000);
        $res = $this->createQueryBuilder('i');
        /** select */
        $this->selectInvoiceSum($res);
        /** join */
        $this->joinInvoicePeriod($res);
        /** where */
        $res = $res->andWhere("i.dateFact is not NULL")->andWhere("i.dateFact >= :date")->setParameter(':date', $date);

        return $res->getQuery()->getResult();
    }

    /**
     * Returns results for interval future invoice
     *
     * @return mixed[]
     */
    public function getInvoicePayCount()
    {
        $date = date('Y-m-d', time() - 2592000);
        $rescount = $this->createQueryBuilder('i');

        /** select */
        $this->selectInvoicePeriodCount($rescount);
        /** where */
        $rescount = $rescount
            ->andWhere("i.dateFact is not NULL")
            ->andWhere("i.dateFact >= :date")
            ->setParameter(':date', $date);

        return $rescount->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns results for interval future invoice
     *
     * @param string $period 30,60,120,160,180,court,pay
     * 
     * @return mixed[]
     */
    public function getEntittyCountSum($period)
    {
        $result = array();
        switch ($period) {
            case 30:
                $result['entities'] = $this->getInvoicePeriod(1, 30);
                $result['count'] = $this->getInvoicePeriodCount(1, 30);
                $result['sum'] = $this->getInvoicePeriodSum(1, 30);
                break;
            case 60:
                $result['entities'] = $this->getInvoicePeriod(31, 60);
                $result['count'] = $this->getInvoicePeriodCount(31, 60);
                $result['sum'] = $this->getInvoicePeriodSum(31, 60);
                break;
            case 120:
                $result['entities'] = $this->getInvoicePeriod(61, 120);
                $result['count'] = $this->getInvoicePeriodCount(61, 120);
                $result['sum'] = $this->getInvoicePeriodSum(61, 120);
                break;
            case 180:
                $result['entities'] = $this->getInvoicePeriod(121, 180);
                $result['count'] = $this->getInvoicePeriodCount(121, 180);
                $result['sum'] = $this->getInvoicePeriodSum(121, 180);
                break;
            case 181:
                $result['entities'] = $this->getInvoicePeriod(181, 0);
                $result['count'] = $this->getInvoicePeriodCount(181, 0);
                $result['sum'] = $this->getInvoicePeriodSum(181, 0);
                break;
            case 'court':
                $result['entities'] = $this->getInvoiceCourt();
                $result['count'] = $this->getInvoiceCourtCount();
                $result['sum'] = $this->getInvoiceCourtSum();
                break;
            case 'pay':
                $result['entities'] = $this->getInvoicePay();
                $result['count'] = $this->getInvoicePayCount();
                $result['sum'] = $this->getInvoicePaySum();
                break;
        }
        return $result;
    }
}
