<?php

namespace ITDoors\OperBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * OperOrganizerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperOrganizerRepository extends EntityRepository
{

    /**
     * @param \Datetime $date
     * @param User      $user
     *
     * @return array
     */
    public function getDepartmentsInMonth($date, $user)
    {
        $month = $date->format('m');
        $year = $date->format('Y');
        $sql = $this->createQueryBuilder('do')
            ->select('d.id');

        $sql->leftJoin('do.department', 'd')
            ->leftJoin('do.user', 'u')

            ->where('u = (:user)')
            ->setParameter(':user', $user)
            ->andWhere('MONTH(do.startDatetime) = :month')
            ->setParameter(':month', $month)
            ->andWhere('YEAR(do.startDatetime) = :year')
            ->setParameter(':year', $year);

        return $sql->getQuery()->getResult();
    }
    /**
     * getStatistic
     * 
     * @param \DateTime $date
     * @param mixed[]   $filter
     * 
     * @return integer
     */
    public function getStatistic($date, $filter = null)
    {

        $sql = $this->createQueryBuilder('organizer')
/*            ->select('
            CASE
            when COUNT(organizer.id) = 0
                    then 3
                    else COUNT(organizer.id)  as count
            ');
            //->addSelect('DATE(organizer.startDatetime)');*/
        ->select('COUNT(organizer.id)');

/*        $sql->leftJoin('organizer.department', 'd')
            ->leftJoin('organizer.user', 'u');*/

        $sql->where('DATE(organizer.startDatetime) = :date')
            ->setParameter(':date', $date)
            ->andWhere('organizer.isVisited = true');
        //$sql->groupBy('organizer.id');

        return $sql->getQuery()->getSingleScalarResult();


    }
    /**
     * getTotalVisits
     * 
     * @return integer
     */
    public function getTotalVisits()
    {

        $sql = $this->createQueryBuilder('organizer')
            ->select('COUNT(organizer.id)');

        return $sql->getQuery()->getSingleScalarResult();
    }

    /**
     * getTotalVisitsCommented
     * 
     * @return integer
     */
    public function getTotalVisitsCommented()
    {

        $sql = $this->createQueryBuilder('organizer')
            ->select('COUNT(DISTINCT organizer.id)')

            ->where('organizer.isVisited = true');

        return $sql->getQuery()->getSingleScalarResult();
    }
    /**
     * getAveragePerDayVisits
     * 
     * @return array
     */
    public function getAveragePerDayVisits()
    {

        $sql = $this->createQueryBuilder('organizer')
            ->select('COUNT(organizer.id) as countAll')
            ->addSelect('MIN(organizer.startDatetime) as minDate')
            ->addSelect('MAX(organizer.endDatetime) as maxDate');

        return $sql->getQuery()->getSingleResult();
    }
}
