<?php

namespace SD\CalendarBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * HolidayRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HolidayRepository extends EntityRepository
{
    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function selectCount (QueryBuilder $res)
    {
        $res->select('COUNT(h.id)');

        return $res;
    }
    /**
     * Returns results for interval future invoice
     *
     * @param QueryBuilder $res Description
     * 
     * @return QueryBuilder
     */
    public function select (QueryBuilder $res)
    {
        $res->select('h');

        return $res;
    }
    /**
     * Returns results for interval future holidays
     *
     * @return mixed[]
     */
    public function getList ()
    {
        $res = $this->createQueryBuilder('h');
        $resCount = $this->createQueryBuilder('h');

        /** select */
        $this->select($res);
        $this->selectCount($resCount);

        return array (
            'entities' => $res->getQuery(),
            'count' => $resCount->getQuery()->getSingleScalarResult()
        );
    }
    /**
     * getListForDate
     * 
     * @param integer $startTimestamp
     * @param integer $endTimestamp
     * 
     * @return mixed[]
     */
    public function getListForDate ($startTimestamp, $endTimestamp)
    {
        $res = $this->createQueryBuilder('h');

        /** select */
        $this->select($res);
        /** where */
        if (date('Y', $startTimestamp) == date('Y', $endTimestamp)) {
            $res->andWhere(
                    "CASE "
                    . "WHEN dayofyear(h.date) < 60 "
                    . "THEN 0 "
                    . "ELSE 366 - dayofyear(CAST(CONCAT('31-12-', YEAR(h.date)) as date)) "
                    . "END + dayofyear(h.date) >= :dayofyearStart"
                )
                ->andWhere(
                    "CASE "
                    . "WHEN dayofyear(h.date) < 60 "
                    . "THEN 0 "
                    . "ELSE 366 - dayofyear(CAST(CONCAT('31-12-', YEAR(h.date)) as date) ) "
                    . "END + dayofyear(h.date) <= :dayofyearStop"
                );
        } else {
            $res->andWhere(
                "CASE "
                . "WHEN dayofyear(h.date) < 60 "
                . "THEN 0 "
                . "ELSE 366 - dayofyear(CAST(CONCAT('31-12-', YEAR(h.date)) as date)) "
                . "END + dayofyear(h.date) <= :dayofyearStart"
                . " OR "
                . "CASE "
                . "WHEN dayofyear(h.date) < 60 "
                . "THEN 0 "
                . "ELSE 366 - dayofyear(CAST(CONCAT('31-12-', YEAR(h.date)) as date) ) "
                . "END + dayofyear(h.date) >= :dayofyearStop"
                );
        }
        $dayofyearStart = date('z', $startTimestamp)+1;
        $dayofyearStop = date('z', $endTimestamp)+1;
        $res
            ->setParameter(':dayofyearStart', $dayofyearStart > 60 && !date('L', $startTimestamp) ? $dayofyearStart+1 : $dayofyearStart)
            ->setParameter(':dayofyearStop', $dayofyearStop > 60 && !date('L', $dayofyearStop) ? $dayofyearStop+1 : $dayofyearStop);

        return $res->getQuery()->getResult();
    }
}
