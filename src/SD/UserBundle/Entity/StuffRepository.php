<?php

namespace SD\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * StuffRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StuffRepository extends EntityRepository
{
    /**
     * Get users by companystructure
     *
     * @param integer $companystructureId
     *
     * @return Query
     */
    public function getStuffForCompanystructure($companystructureId)
    {
        return $this->createQueryBuilder('s')
                ->select('s')
                ->leftJoin('s.user', 'u')
                ->leftJoin('s.companystructure', 'c')
                ->leftJoin('s.status', 'st')
                ->where('s.companystructureId = :companystructureId')
                ->andWhere('c.stuffId is NULL or c.stuffId != s.id')
                ->andWhere("st.id is NULL or st.lukey = :status")
                ->setParameter(':companystructureId', $companystructureId)
                ->setParameter(':status', 'worked')
                ->orderBy('u.lastName')
                ->getQuery()->getResult();
    }

    /**
     * findDepatrmentsByCompanystructures
     *
     * @param array $companystructures
     * @param bool  $activeStatus
     *
     * @return array
     */
    public function findDepatrmentsByCompanystructures($companystructures, $activeStatus)
    {
        $ids = $this->createQueryBuilder('s')
                ->select('DISTINCT IDENTITY(sd.departments)')
                ->join('s.companystructure', 'c')
                ->join('s.stuffDepartments', 'sd')
                ->join('sd.departments', 'd')
                ->join('d.status', 'st')
                ->where('c in (:companystructures)')
                ->andWhere('st.id =:status')
                ->setParameter(':companystructures', $companystructures)
                ->setParameter(':status', $activeStatus ? 1 : 2)
                ->getQuery()
                ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $result = [];
        foreach ($ids as $id) {
            $result[] = $id['1'];
        }

        return $result;
    }

    /**
     * findDepatrmentsByStuff
     *
     * @param array $stuff
     * @param bool  $activeStatus
     *
     * @return array
     */
    public function findDepatrmentsByStuff($stuff, $activeStatus)
    {
        $ids = $this->createQueryBuilder('s')
            ->select('DISTINCT IDENTITY(sd.departments)')
            ->join('s.stuffDepartments', 'sd')
            ->join('sd.departments', 'd')
            ->join('d.status', 'st')
            ->where('s.id =:id')
            ->setParameter(':id', $stuff->getId())
        ;
        if ($activeStatus) {
            $ids = $ids->andWhere('st.id =:status')
                ->setParameter(':status', $activeStatus ? 1 : 2);
        }
            $ids = $ids->getQuery()
                ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $result = [];
        foreach ($ids as $id) {
            $result[] = $id['1'];
        }

        return $result;
    }
}
