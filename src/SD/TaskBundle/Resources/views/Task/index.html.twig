{% extends "::base.html.twig" %}
{% trans_default_domain 'SDTaskBundle' %}
{% block title %} {% trans %}List tasks{% endtrans %} {% endblock %}
{% block page_breadcrumbs %}
    <ul class="page-breadcrumb breadcrumb">
        <li>
            <i class="fa fa-home"></i>
            <a href="{{ path('sd_dashboard_homepage') }}" title="{% trans %}Dashboard{% endtrans %}">{% trans %}Dashboard{% endtrans %}</a>
            <i class="fa fa-angle-right"></i>
        </li>
        <li><a href="" title="{% trans   %}Tasks{% endtrans %}">{% trans %}Tasks{% endtrans %}</a></li>
    </ul>
{% endblock %}
{% block page_title %}
{#
    <h3 class="page-title">
        {% trans %}Tasks{% endtrans %} <small>{% trans %}Tasks list{% endtrans %}</small>
    </h3>
#}
{% endblock %}

{% block css_page_level_plugin %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="{{ asset('metronic/assets/global/plugins/select2/select2.css')}} " />
    <link rel="stylesheet" type="text/css" href="{{ asset('metronic/assets/global/plugins/bootstrap-editable/bootstrap-editable/css/bootstrap-editable.css')}} " />
    <link rel="stylesheet" type="text/css" href="{{ asset('bundles/itdoorsoper/css/details.css')}}" />
    <link rel="stylesheet" type="text/css" href="{{ asset('metronic/assets/admin/pages/css/todo.css') }}" />
{% endblock %}

{% block js_page_level_plugins %}
    {{ parent() }}
    <script type="text/javascript" src="{{ asset('metronic/assets/global/plugins/select2/select2.min.js') }}"></script>
    <script type="text/javascript" src="{{ asset('metronic/assets/global/plugins/bootstrap-editable/bootstrap-editable/js/bootstrap-editable.js') }}"></script>


{% endblock %}

{% block body %}
    <script src="{{ asset('templates/core/angular/angular.js') }}"></script>
    <script src="{{ asset('templates/core/angular/angular-route.js') }}"></script>
    <script src="{{ asset('templates/core/angular/angular-animate.js') }}"></script>

    <style>
        .notDisplayed{
            display: none;
        }
/*
        .task-item{
            -webkit-transition: opacity 1s;
            -moz-transition: opacity 1s;
            -o-transition: opacity 1s;
            transition: opacity 1s;
            opacity: 1;
        }
        .task-item.ng-enter{
            opacity: 0.3;
            transition-delay: 0.3s;
        }
        .task-item.ng-enter-active{
            opacity: 0.3;
        }
        .task-item.ng-enter-stagger {

        }
*/
    </style>
    <script>
        var taskApp = angular.module('taskApp', ['ngRoute', 'ngAnimate']);

        taskApp.config(function($routeProvider) {
            $routeProvider.
                    when('/', {
                        template: '<div style="color:#666666;">&lt;&lt; Выберите задачу из списка</div>',
                        controller: 'TaskCtrl'
                    }).
                    when{
                        templateUrl: '{{ url('sd_task_angular_view') }}',
                        controller: 'TaskViewCtrl'
                    }).
                    otherwise({
                        redirectTo: '/'
                    });
        });
        taskApp.controller('TaskViewCtrl', function ($scope, $http, $routeParams) {
            var id = $routeParams.idTaskUserRole;

            console.log(id)
        })

        taskApp.controller('TaskCtrl', function ($scope, $http, $interval) {
            $scope.tasksUserRole = [];
            $scope.customFilter = {};
            $scope.tasksCount = {
                'author': 0,
                'performer': 0,
                'matcher': 0,
                'controller': 0,
                'viewer': 0
            };

            var intervalActivity;
            $scope.updateTasks = function() {
                $http({method: 'GET', url: '{{ path('sd_task_get_tasks_api') }}'}).
                        success(function(data, status, headers, config) {
                            //$scope.activities = data;
                            $scope.tasksUserRole = data;
                            console.log(data)
                            $scope.recountTasks();

                            // this callback will be called asynchronously
                            // when the response is available
                        }).
                        error(function(data, status, headers, config) {
                            // called asynchronously if an error occurs
                            // or server returns response with an error status.
                        });
            }

            $scope.recountTasks = function() {
                for (var i =0; i<$scope.tasksUserRole.length; i++) {
                    var key = $scope.tasksUserRole[i].role.name+'';
                    $scope.tasksCount[key] += 1;

                    $scope.tasksUserRole[i].altColorRole = 'info';
                    //insert alt colors to tasks
                    if (key == 'performer') {
                        $scope.tasksUserRole[i].altColorRole = 'blue';
                    } else if (key == 'controller') {
                        $scope.tasksUserRole[i].altColorRole = 'yellow';
                    } else if (key == 'matcher') {
                        $scope.tasksUserRole[i].altColorRole = 'green';
                    } else if (key == 'viewer') {
                        $scope.tasksUserRole[i].altColorRole = 'grey';
                    } else if (key == 'author') {
                        $scope.tasksUserRole[i].altColorRole = 'red';
                    }
                }
                //console.log($scope.tasksCount);
            }
            $scope.updateTasks();

//            intervalActivity = $interval($scope.updateActivity, 2000)

            /*
             $scope.startActivity = function() {

             intervalActivity = $interval(function() {
             $scope.updateActivity;
             }, 1000)
             }
             */

            $scope.filterRole = function(role) {
                $scope.customFilter.role = {};
                $scope.customFilter.role.name = role;
                console.log($scope.customFilter);
            }

        });

/*
        $(document).ready(function(){
            $('.task-item').die('click')
            $('.task-item').live('click', function(e){
                clearTaskContent();
                showSpinner()
                var obj = this;
                var id = $(obj).data('id');
                var url = $('#more_info_input').data('url_get_task_view');
                var sendData = {
                    'id': id
                }
                $.ajax({
                    type: 'POST',
                    url: url,
                    data: sendData,
                    success: function(data1) {
                        //alert(data1)
                        data = JSON.parse(data1);
                        if (data.success == 1) {
                            hideSpinner();
                            setTaskContent(data.html);
                        } else {
                            //$('#copy_etalon_finished').show('blind', {}, 500);
                        }
                    }
                })
            })
            $('#taskFilterButton').die('click');
            $('#taskFilterButton').bind('click', function(e){
                e.preventDefault();

                var spinner = $('#spinner');
                spinner.removeClass('notDisplayed');

                var filtersCheckboxes = $('.roleFilter:checked');
                var filter = new Array();
                var filterRole = new Array();

                for (var i=0; i<filtersCheckboxes.length; i++) {
                    filterRole.push(filtersCheckboxes[i].value);
                }

                var showClosed = $("#oldFilter").prop("checked");
                if (showClosed) {
                    showClosed = 1;
                } else {
                    showClosed = 0;
                }
                filter = {
                    'role': filterRole
                }
                var url = $('#more_info_input').data('url_get_task_list');
                var sendData = {
                    'filter': filter,
                    'showClosed': showClosed
                }

                $.ajax({
                    type: 'POST',
                    url: url,
                    data: sendData,
                    success: function(data1) {
                        spinner.addClass('notDisplayed');
                        setTaskListContent(data1);

                        //data = JSON.parse(data1);

*/
/*
                        if (data.success == 1) {
                            //console.log(data.html);
                            spinner.addClass('notDisplayed');
                            setTaskListContent(data.html);
                            //ITDoorsAjax.unblockUI($('#tasks_list'));
                            //$('#tasks_list').html('').html(data.html);
                            //$('#form_modal_task_view').modal('show');
                        } else {
                            alert('error');
                            //$('#copy_etalon_finished').show('blind', {}, 500);
                        }
*//*


                    }

                })
            })


        })

        function setTaskContent(html) {
            $('#task_holder').html('')
            $('#task_holder').html(html)
        }

        function setTaskListContent(html) {
            $('.todo-tasklist').html('')
            $('.todo-tasklist').html(html)
        }

        function clearTaskContent() {
            $('#task_holder').html('')
        }

        function showSpinner() {
            var spinner = $('#spinner');
            spinner.removeClass('notDisplayed');
        }

        function hideSpinner() {
            var spinner = $('#spinner');
            spinner.addClass('notDisplayed');
        }
*/

    </script>

    <!-- BEGIN PAGE CONTENT-->
    <div class="row" ng-app="taskApp" ng-controller="TaskCtrl">
    <div class="col-md-12">
    <!-- BEGIN TODO SIDEBAR -->
    <div class="todo-sidebar">
        <div class="portlet light">
            <div class="portlet-title">
                <div class="caption" data-toggle="collapse" data-target=".todo-project-list-content">
                    <span class="caption-subject font-green-sharp bold uppercase">{% trans %}Tasks{% endtrans %} </span>
                    <span class="caption-helper visible-sm-inline-block visible-xs-inline-block">click to view project list</span>
                </div>
                <div class="actions">
                    <div class="btn-group">
                        <a class="btn green-haze btn-circle btn-sm todo-projects-config" href="#" data-toggle="dropdown" data-hover="dropdown" data-close-others="true">
                            <i class="fa fa-filter{#icon-settings#}"></i> &nbsp; <i class="fa fa-angle-down"></i>
                        </a>
                        <ul class="dropdown-menu hold-on-click dropdown-checkboxes pull-right">

                            {% for taskRole in allTaskRoles %}
                                {% if taskRole == 'author' %}
                                    {% set icon = 'fa-pencil' %}
                                    {% set label = 'label-danger' %}
                                    {% set checked = '' %}
                                {% elseif taskRole == 'performer' %}
                                    {% set icon = 'fa-rocket' %}
                                    {% set label = 'label-info' %}
                                    {% set checked = 'checked' %}
                                {% elseif taskRole == 'controller' %}
                                    {% set icon = 'fa-crosshairs' %}
                                    {% set label = 'label-warning' %}
                                    {% set checked = '' %}
                                {% endif %}
                                <li><label><input type="checkbox" class="roleFilter" value="{{ taskRole }}" {{ checked }}/>{{ taskRole|trans }}</label></li>
                            {% endfor %}
                            <li class="divider">
                            </li>
                            <li>
                                <label><input type="checkbox" id="oldFilter" value="1"/>{% trans %}Show closed{% endtrans %}</label>
                            </li>
                            <li class="divider">
                            </li>
                            <li>
                                <a class="btn red" id="taskFilterButton" >
                                    <span style="color: white;">{% trans %}Filter{% endtrans %}</span>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="portlet-body todo-project-list-content">
                <div class="">
                    <ul class="nav nav-pills nav-stacked">
                        {% for taskRole in allTaskRoles %}
                            {% if taskRole == 'author' %}
                                {% set icon = 'fa-pencil' %}
                                {% set badge = 'badge-danger' %}
                            {% elseif taskRole == 'performer' %}
                                {% set icon = 'fa-rocket' %}
                                {% set badge = 'badge-info' %}
                            {% elseif taskRole == 'controller' %}
                                {% set icon = 'fa-crosshairs' %}
                                {% set badge = 'badge-warning' %}
                            {% elseif taskRole == 'matcher' %}
                                {% set icon = 'fa-crosshairs' %}
                                {% set badge = 'badge-success' %}
                            {% elseif taskRole == 'viewer' %}
                                {% set icon = 'fa-crosshairs' %}
                                {% set badge = 'badge-default' %}
                            {% endif %}
                            <li data-ng-click="filterRole('{{ taskRole }}')">
                                <a href="">
                                    <span class="badge badge-active {{ badge }}" style="float: right; margin-top: 2px"> {{ '{{ tasksCount["'~taskRole~'"] }}' }} </span>
                                    {{ taskRole|trans }}
                                </a>
                            </li>
                        {% endfor %}
                    </ul>
                </div>
                <h3>{% trans %}Keys{% endtrans %}</h3>
                <span class="badge badge-danger badge-active">&nbsp;  </span> - {% trans %}author{% endtrans %}<br>
                <span class="badge badge-info badge-active">&nbsp;  </span> - {% trans %}performer{% endtrans %}<br>
                <span class="badge badge-warning badge-active">&nbsp;  </span> - {% trans %}controller{% endtrans %}<br>
                <span class="badge badge-success badge-active">&nbsp;  </span> - {% trans %}matcher{% endtrans %}<br>
                <span class="badge badge-default badge-active">&nbsp;  </span> - {% trans %}viewer{% endtrans %}<br>
            </div>
        </div>
    </div>
    <!-- END TODO SIDEBAR -->
    <!-- BEGIN TODO CONTENT -->
    <div class="todo-content">
    <div class="portlet light">
    <!-- PROJECT HEAD -->
    <div class="portlet-title">
        <div class="caption">
            <i class="icon-bar-chart font-green-sharp hide"></i>
             &nbsp;
            <span class="caption-subject font-green-sharp bold uppercase">
                {% trans %}Tasks list{% endtrans %}
{#
                <div class="input-icon right" style="">
                    <i class="icon-magnifier"></i>
                    <input type="text" class="form-control input-circle"
                           ng-model="search" placeholder="{% trans %}Search{% endtrans %}...">
                </div>
#}
            </span>
            <span class="caption-helper">
                <i class="fa fa-spinner fa-spin notDisplayed" id="spinner"></i>
            </span>

        </div>

        <div class="actions">
            <div class="btn-group">
                <a class="btn green-haze btn-circle btn-sm ajax-form"
                   {#data-toggle="modal"#}
                   {#href="#form_modal_task"#}
                   data-target_holder="task_holder"
                   data-form_name="taskForm1"
                   data-post_function="updateList"
                   data-post_target_id="task_list"
                        >{% trans %}Create task{% endtrans %}
                    <i class="fa fa-plus"></i>
                </a>

{#
                <button class="btn green-haze btn-circle btn-sm ajax-form" href="#" id="create_task_btn" >
                    {% trans %}Create task{% endtrans %}
                    <i class="fa fa-plus"></i>
                </button>
#}

            </div>
        </div>
    </div>
    <!-- end PROJECT HEAD -->
    <div class="portlet-body">
    <div class="row">
    <div class="col-md-5 col-sm-4">
        <div class="scroller" style="max-height: 600px; min-height: 500px;" data-always-visible="0" data-rail-visible="0" data-handle-color="#dae3e7">
            <div class="todo-tasklist" data-url="{{ path('sd_task_list') }}" id="task_list">
                <a href="{{ path('sd_task_homepage') }}#/{{ '{{ taskUserRole.id }}' }}"
                   ng-repeat="taskUserRole in tasksUserRole | filter:customFilter" style="text-decoration: none;">
                    <div class="todo-tasklist-item todo-tasklist-item-border-{{'{{ taskUserRole.altColorRole }}' }} task-item"
                         style="border-width: 3px; margin-bottom: 5px;">
                        <img class="todo-userpic pull-left"
                             src="{{ userprofiles_url}}{{ '{{ taskUserRole.user.id }}'}}{{ '/image29_'}}{{ '{{ taskUserRole.user.photo }}' }}"
                             width="27px" height="27px">
                        <div class="todo-tasklist-item-title">
                            {{ '{{ taskUserRole.task.title }}' }} <span style="color: #577688">(ID:{{ '{{ taskUserRole.task.id }}' }}) </span>
                        </div>
                        <div class="todo-tasklist-item-text">
                            <span ng-if="taskUserRole.task.description.length > 100">
                                {{ '{{ taskUserRole.task.description.slice(0, 50) }}' }}...
                            </span>
                            <span ng-if="taskUserRole.task.description.length <= 100">
                                {{ '{{ taskUserRole.task.description }}' }}
                            </span>
                        </div>
                        <div class="todo-tasklist-controls pull-left">
    {#
            <span class="todo-tasklist-date"><i class="fa fa-calendar"></i>
                {{
                include('SDTaskBundle:Task:taskEndDateLast.html.twig',
                {
                'taskUserRole' : taskUserRole
                }
                )
                }}
            </span>
    #}
                            <span class="label label-sm label-{{'{{ taskUserRole.altColorStage }}' }}">{{ '{{ taskUserRole.task.stage.name }}' }}</span>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    </div>
    <div class="todo-tasklist-devider">
    </div>
    <div class="col-md-7 col-sm-8" id="task_holder" ng-view="">
        <div style="color:#666666;"><< {% trans %}Choose any task from the list{% endtrans %}</div>
{#
        <div class="scroller" style="max-height: 600px;" data-always-visible="0" data-rail-visible="0" data-handle-color="#dae3e7"
                >
#}

{#
    {{
        include('SDTaskBundle:Task:taskView.html.twig',
            {
                'taskUserRole' : tasksUserRole[0]
            }
        )
    }}
#}
{#
        </div>
#}
    </div>
    </div>
    </div>
    </div>
    </div>
    <!-- END TODO CONTENT -->
    </div>
    </div>

    <input type="hidden" id="more_info_input"
           data-url_task_modal="{{ path('sd_task_modal') }}"
           data-url_task_table="{{ path('sd_task_table')}}"
           data-url_get_task_view="{{ path('sd_task_view')}}"
           data-url_get_task_list="{{ path('sd_task_list')}}"
            >

{% endblock body %}