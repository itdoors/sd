<?php

namespace SD\TaskBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TaskUserRoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TaskUserRoleRepository extends EntityRepository
{

    private $notViewingStages = array('closed', 'undone', 'done');
    private $viewingRoleMatching = array('author', 'matcher');
    /**
     * @param integer $userId
     * @param string  $role
     *
     * @return integer
     */
    public function countTasksByRoleAndUser($userId, $role)
    {
        $notViewingStages = $this->notViewingStages;
        $viewingRoleMatching = $this->viewingRoleMatching;

        $sql = $this->createQueryBuilder('tur')
            ->select('COUNT(tur.id)')
            ->leftJoin('tur.role', 'r')
            ->leftJoin('tur.task', 't')
            ->leftJoin('t.stage', 's')
            ->leftJoin('tur.user', 'u')
            ->where('u.id = :userId')
            ->setParameter(':userId', $userId);


        $sql->andWhere('s.name NOT IN (:stage)')
            ->setParameter(':stage', $notViewingStages);

        $sql->andWhere('(r.name IN (:viewingRoleMatching) OR s.name != :stageMatching)')
            ->setParameter(':stageMatching', 'matching')
            ->setParameter(':viewingRoleMatching', $viewingRoleMatching);


        if ($role) {
            $sql->andWhere('r.name = :role')
                ->setParameter(':role', $role);
        }

        return $sql->getQuery()->getSingleScalarResult();
    }


    /**
     * @param array $filterArray
     *
     * @return array
     */
    public function getEntitiesListByFilter($filterArray)
    {

        $notViewingStages = $this->notViewingStages;
        $viewingRoleMatching = $this->viewingRoleMatching;

        //$notViewingMatched = array('matching');
        $roleMatching = array('matcher');

        $sql = $this->createQueryBuilder('tur')
            ->leftJoin('tur.role', 'r')
            ->leftJoin('tur.task', 't')
            ->leftJoin('t.stage', 's')
            ->leftJoin('tur.user', 'u');

        if (isset($filterArray['showClosed']) && $filterArray['showClosed']) {
            $sql->where('s.name IN (:stage)')
                ->setParameter(':stage', $notViewingStages);
        } else {
            $sql->where('s.name NOT IN (:stage)')
            ->setParameter(':stage', $notViewingStages);
        }

        $sql->andWhere('(r.name IN (:viewingRoleMatching) OR s.name != :stageMatching)')
            ->setParameter(':stageMatching', 'matching')
            ->setParameter(':viewingRoleMatching', $viewingRoleMatching);

/*        $sql->andWhere('(r.name NOT IN (:roleMatching) OR s.name = :stageMatching)')
            ->setParameter(':stageMatching', 'matching')
            ->setParameter(':roleMatching', $roleMatching);*/


/*        if (isset($filterArray['role']) && count($filterArray['role'])) {
            $sql->andWhere('r IN (:role)')
                ->setParameter(':role', $filterArray['role']);
        } else {
            $sql->andWhere('r.name IN (:role)')
                ->setParameter(':role', array('performer'));
        }*/

        if (isset($filterArray['user'])) {
            $sql->andWhere('u = :user')
                ->setParameter(':user', $filterArray['user']);
        }

        $sql->orderBy('t.createDate', 'DESC');

        return $sql->getQuery()->getResult();
    }

    /**
     * @param \SD\UserBundle\Entity\User $user
     *
     * @return array
     */
    public function getTasksAvailable($user)
    {

        $notViewingStages = $this->notViewingStages;
        $viewingRoleMatching = $this->viewingRoleMatching;

        //$notViewingMatched = array('matching');
        $roleMatching = array('matcher');

        $sql = $this->createQueryBuilder('tur')
            ->select('t.id')
            ->leftJoin('tur.role', 'r')
            ->leftJoin('tur.task', 't')
            ->leftJoin('t.stage', 's')
            ->leftJoin('tur.user', 'u');

        $sql->andWhere('(r.name IN (:viewingRoleMatching) OR s.name != :stageMatching)')
            ->setParameter(':stageMatching', 'matching')
            ->setParameter(':viewingRoleMatching', $viewingRoleMatching);

            $sql->andWhere('u = :user')
                ->setParameter(':user', $user);

        $sql->orderBy('t.createDate', 'DESC');

        return $sql->getQuery()->getResult();
    }
}
