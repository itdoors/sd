<?php

namespace Lists\DepartmentBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * DepartmentPeopleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepartmentPeopleRepository extends EntityRepository
{
    /**
     * creates builder query to find all departmentPeople by id
     *
     * @param $idDepartment
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function DepartmentPeopleBuilderById($idDepartment) {
        $query = $this->createQueryBuilder('dp')
            ->select('dp.id as id')
            ->addSelect('dp.firstName')
            ->addSelect('dp.lastName')
            ->addSelect('dp.middleName')
/*            ->addSelect('m.active as mpkActive')
            ->addSelect('d.address as address')
            ->addSelect('o.name as organizationName')
            ->addSelect('o.rs')
            ->addSelect('o.edrpou')
            ->addSelect('o.inn')
            ->addSelect('o.certificate')
            ->addSelect('o.address as organizationAddress')
            ->addSelect('otype.title as organizationType')
            ->addSelect('r.name as regionName')
            ->addSelect('c.name as cityName')
            ->addSelect('s.name as statusName')
            ->addSelect('t.name as typeName')
            ->addSelect('d.statusDate')
            ->addSelect('d.description')
            ->addSelect("CONCAT(CONCAT(u.lastName, ' '), u.firstName) as opermanagerName")
            ->leftJoin('d.status', 's')
            ->leftJoin('d.organization', 'o')
            ->leftJoin('o.organizationType', 'otype')
            ->leftJoin('d.city', 'c')
            ->leftJoin('c.region', 'r')
            ->leftJoin('d.type', 't')
            ->leftJoin('d.opermanager', 'u')
            ->leftJoin('d.mpks', 'm')
            ->leftJoin('r.companystructure', 'companyStructure')*/
            ->leftJoin('dp.department', 'd')
            ->andWhere('d.id = :id')
            ->setParameter(':id', $idDepartment);
        return $query;
    }

    /**
     * creates query to find all departmentPeople by id
     *
     * @param $idDepartment
     *
     * @return Query
     */
    public function getAllDepartmentPeopleQueryById($idDepartment) {
        $query = $this->DepartmentPeopleBuilderById($idDepartment)->getQuery();
        return $query;
    }


    /**
     * creates count query to find the number of all departments
     *
     * @param $idDepartment
     *
     * @return integer
     */
    public function countAllDepartmentPeopleById($idDepartment) {
        $countQuery = $this->countAllDepartmentPeopleBuilderById($idDepartment)->getQuery();
        return $countQuery->getSingleScalarResult();
    }

    /**
     * creates QueryBuilder to find the number of all departments
     *
     * @param $idDepartment
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function countAllDepartmentPeopleBuilderById($idDepartment) {
        $countQuery = $this->createQueryBuilder('dp')
            ->select('COUNT(dp.id) as id')
            ->leftJoin('dp.department', 'd')
            ->andWhere('d.id = :id')
            ->setParameter(':id', $idDepartment);

        return $countQuery;
    }



}
