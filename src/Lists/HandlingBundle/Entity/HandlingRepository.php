<?php

namespace Lists\HandlingBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * HandlingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HandlingRepository extends EntityRepository
{
    public function getAllForSalesQuery($userIds, $filters)
    {
        if (!is_array($userIds) && $userIds)
        {
            $userIds = array($userIds);
        }

        /** @var \Doctrine\ORM\QueryBuilder $sql*/
        $sql = $this->createQueryBuilder('h');

        /** @var \Doctrine\ORM\QueryBuilder $sqlCount */
        $sqlCount = $this->createQueryBuilder('h');

        $this->processSelect($sql);
        $this->processCount($sqlCount);

        $this->processBaseQuery($sql);
        $this->processBaseQuery($sqlCount);

        if (sizeof($userIds))
        {
            $this->processUserQuery($sql, $userIds);
            $this->processUserQuery($sqlCount, $userIds);
        }

        $this->processFilters($sql, $filters);
        $this->processFilters($sqlCount, $filters);

        $this->processOrdering($sql);

        $query = $sql->getQuery();

        $count = $sqlCount->getQuery()->getSingleScalarResult();

        $query->setHint('knp_paginator.count', $count);

        return $query;
    }

    /**
     * Processes sql query. adding select
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     */
    public function processSelect($sql)
    {
        $sql
            ->select('DISTINCT (h.id)')
            ->addSelect('h.id as handlingId')
            ->addSelect('o.name as organizationName')
            ->addSelect('h.createdate as handlingCreatedate')
            ->addSelect('h.lastHandlingDate as handlingLastHandlingDate')
            ->addSelect('h.nextHandlingDate as handlingNextHandlingDate')
            ->addSelect('city.name as cityName')
            ->addSelect('scope.name as scopeName')
            ->addSelect('h.serviceOffered as handlingServiceOffered')
            ->addSelect('h.chance as handlingChance')
            ->addSelect('status.name as statusName')
            ->addSelect('status.percentageString as percentageString')
            ->addSelect('status.progress as progress')
            ->addSelect('result.percentageString as resultPercentageString')
            ->addSelect('result.progress as resultProgress')
            ->addSelect("
                array_to_string(
                    ARRAY(
                        SELECT
                            CONCAT(CONCAT(u.lastName, ' '), u.firstName)
                        FROM
                            SDUserBundle:User u
                        LEFT JOIN u.handlings hu
                        WHERE hu.id = h.id
                    ), ','
                ) as fullNames
            ")
            ->addSelect("
                  array_to_string(
                     ARRAY(
                        SELECT
                          hs.name
                        FROM
                          ListsHandlingBundle:HandlingService hs
                        LEFT JOIN hs.handlings handlings
                        WHERE h.id = handlings.id
                     ), ','
                   ) as serviceList
           ");
    }


    /**
     * Processes sql query. adding select
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     */
    public function processCount($sql)
    {
        $sql
            ->select('COUNT(h.id) as handlingcount');

    }

    /**
     * Processes sql query. adding base query
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     */
    public function processBaseQuery($sql)
    {
        $sql
            ->leftJoin('h.organization', 'o')
            ->leftJoin('o.city', 'city')
            ->leftJoin('o.scope', 'scope')
            ->leftJoin('h.status', 'status')
            ->leftJoin('h.result', 'result')
            ->leftJoin('h.users', 'users');

    }

    /**
     * Processes sql query. adding users query
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     * @param int[] $userIds
     */
    public function processUserQuery($sql, $userIds)
    {
        $sql
            ->where('users.id in (:userIds)')
            ->setParameter(':userIds', $userIds);
    }

    /**
     * Processes sql query. adding users query
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     */
    public function processOrdering($sql)
    {
        $sql
            //->orderBy('h.createdatetime', 'DESC');
            ->addOrderBy('h.id', 'DESC');
    }

    /**
     * Processes sql query depending on filters
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     * @param mixed[] $filters
     */
    public function processFilters(\Doctrine\ORM\QueryBuilder $sql, $filters)
    {
        if (sizeof($filters))
        {

            foreach($filters as $key => $value)
            {
                if (!$value)
                {
                    continue;
                }
                switch($key)
                {
                    case 'organization_id':
                        $sql
                            ->andWhere("h.organization_id = :organizationId");

                        $sql->setParameter(':organizationId', $value);
                        break;
                    case 'scope':
                        if (isset($value[0]) && !$value[0])
                        {
                            break;
                        }
                        $sql->andWhere('scope.id in (:scopeIds)');
                        $sql->setParameter(':scopeIds', $value);
                        break;
                    case 'city':
                        if (isset($value[0]) && !$value[0])
                        {
                            break;
                        }
                        $sql->andWhere('city.id in (:cityIds)');
                        $sql->setParameter(':cityIds', $value);
                        break;
                    case 'users':
                        if (isset($value[0]) && !$value[0])
                        {
                            break;
                        }
                        $sql->andWhere('users.id in (:userFilterIds)');
                        $sql->setParameter(':userFilterIds', $value);
                        break;
                    case 'usersString':
                        $value = explode(',', $value);
                        $sql->andWhere('users.id in (:userFilterIds)');
                        $sql->setParameter(':userFilterIds', $value);
                        break;

                    case 'progress':
                        $sql->andWhere('result.progress = :resultProgress');
                        $sql->setParameter(':resultProgress', $value);
                        break;

                    case 'progressNOT':
                        $sql->andWhere('result.progress <> :resultProgress OR result.progress IS NULL');
                        $sql->setParameter(':resultProgress', $value);
                        break;

                    case 'isClosed':
                        $sql->andWhere('h.isClosed <> true or h.isClosed is null');
                        break;
                }
            }
        }
    }

    public function getHandlingShow($id)
    {
       return $this->createQueryBuilder('h')
           ->select('h')
           ->addSelect('o.name as organizationName')
           ->addSelect('o.id as organizationId')
           ->addSelect("CONCAT(CONCAT(u.lastName, ' '), u.firstName) as creatorFullName")
           ->addSelect("CONCAT(CONCAT(closer.lastName, ' '), closer.firstName) as closerFullname")
           ->addSelect("
                  array_to_string(
                     ARRAY(
                        SELECT
                          hsi.id
                        FROM
                          ListsHandlingBundle:HandlingService hsi
                        LEFT JOIN hsi.handlings handlingsi
                        WHERE h.id = handlingsi.id
                     ), ','
                   ) as serviceIds
           ")
           ->addSelect("
                  array_to_string(
                     ARRAY(
                        SELECT
                          hs.name
                        FROM
                          ListsHandlingBundle:HandlingService hs
                        LEFT JOIN hs.handlings handlings
                        WHERE h.id = handlings.id
                     ), ','
                   ) as serviceList
           ")
           ->addSelect('h.closedatetime as closedatetime')
           ->addSelect('status.percentageString as percentageString')
           ->addSelect('status.progress as progress')
           ->addSelect('result.slug as resultSlug')
           ->addSelect('result.percentageString as resultPercentageString')
           ->addSelect('result.progress as resultProgress')
           ->leftJoin('h.organization', 'o')
           ->leftJoin('h.type', 'type')
           ->leftJoin('h.status', 'status')
           ->leftJoin('h.result', 'result')
           ->leftJoin('h.user', 'u')
           ->leftJoin('h.closer', 'closer')
           ->where('h.id = :id')
           ->setParameter(':id', $id)
           ->getQuery()
           ->getSingleResult();
    }

    public function getOrganizationByHandlingId($handlingId)
    {
        $sql = $this->createQueryBuilder('h')
            ->where('h.id = :handlingId')
            ->setParameter(':handlingId', $handlingId)
            ->getQuery()
            ->getSingleResult();

        return $sql->getOrganizationId();
    }

    /**
     * Returns query of last manager messages
     *
     * @param $filters
     *
     * @return Query
     */
    public function getReportLastMessages($filters = array())
    {
        if (!isset($filters['userId']) || !$filters['userId'])
        {
            return array();
        }

        $userId = $filters['userId'];

        $sql = $this->getEntityManager()
            ->createQuery("
        SELECT
            h.id as handlingId,
            o.name as organizationName,
            ht.name as handlingMessageTypeName,
            hm.createdate as handlingMessageCreatedate,
            hm.description as handlingMessageDescription,
            hm.user_id as handlingMessageUserId,
            CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(contact.lastName, ' '), contact.firstName), ' | '), contact.phone1), ' | '), contact.phone2)  as handlingMessageContact,
            ht1.name as handlingMessageTypeName1,
            hm1.createdate as handlingMessageCreatedate1,
            hm1.description as handlingMessageDescription1,
            hm1.user_id as handlingMessageUserId1,
            CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(CONCAT(contact1.lastName, ' '), contact1.firstName), ' | '), contact1.phone1), ' | '), contact1.phone2)  as handlingMessageContact1
        FROM
            ListsHandlingBundle:Handling h
            LEFT JOIN h.organization o
            LEFT JOIN h.HandlingMessages hm
            LEFT JOIN hm.type ht
            LEFT JOIN hm.contact contact
            LEFT JOIN h.HandlingMessages hm1
            LEFT JOIN hm1.type ht1
            LEFT JOIN hm1.contact contact1

        WHERE
            hm.id = (SELECT
                    MAX(hm2.id)
                FROM
                    ListsHandlingBundle:HandlingMessage hm2
                WHERE
                    hm2.handling_id = h.id AND
                    (hm2.additionalType <> :futureMessageParam OR hm2.additionalType IS NULL) AND
                    hm2.user_id = :userId AND
                    hm2.id < (
                        SELECT
                            MAX(hm4.id)
                        FROM
                            ListsHandlingBundle:HandlingMessage hm4
                        WHERE
                            hm4.handling_id = h.id AND
                            hm4.additionalType = :futureMessageParam AND
                            hm4.user_id = :userId
                    )
                ) AND
            hm1.id = (
                SELECT
                    MAX(hm3.id)
                FROM
                    ListsHandlingBundle:HandlingMessage hm3
                WHERE
                    hm3.handling_id = h.id AND
                    hm3.additionalType = :futureMessageParam AND
                    hm3.user_id = :userId

                )
        ORDER BY hm1.createdate DESC
            ");

        $sql
            ->setParameter(':futureMessageParam', HandlingMessage::ADDITIONAL_TYPE_FUTURE_MESSAGE)
            ->setParameter(':userId', $userId);

        return $sql
            ->getResult();
    }
}
