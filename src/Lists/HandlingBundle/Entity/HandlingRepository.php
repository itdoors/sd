<?php

namespace Lists\HandlingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * HandlingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class HandlingRepository extends EntityRepository
{
    public function getAllForSalesQuery($userIds, $filters)
    {
        if (!is_array($userIds) && $userIds)
        {
            $userIds = array($userIds);
        }

        $sql = $this->createQueryBuilder('h')
            ->select('h.id as handlingId')
            ->addSelect('o.name as organizationName')
            ->addSelect('h.createdatetime as handlingCreatedatetime')
            ->addSelect('h.lastHandlingDate as handlingLastHandlingDate')
            ->addSelect('city.name as cityName')
            ->addSelect('scope.name as scopeName')
            ->addSelect('h.serviceOffered as handlingServiceOffered')
            ->addSelect('h.chance as handlingChance')
            ->addSelect('status.name as statusName')
            ->addSelect("
                array_to_string(
                    ARRAY(
                        SELECT
                            CONCAT(CONCAT(u.lastName, ' '), u.firstName)
                        FROM
                            SDUserBundle:User u
                        LEFT JOIN u.handlings hu
                        WHERE hu.id = h.id
                    ), ','
                ) as fullNames
            ")
            ->leftJoin('h.organization', 'o')
            ->leftJoin('o.city', 'city')
            ->leftJoin('o.scope', 'scope')
            ->leftJoin('h.status', 'status')
            ->orderBy('h.createdatetime', 'DESC');

        if (sizeof($userIds))
        {
            $sql
                ->leftJoin('o.users', 'users')
                ->where('users.id in (:userIds)')
                ->setParameter(':userIds', $userIds);
        }

        $this->processFilters($sql, $filters);

        $query = $sql->getQuery();

        $count = $this->getAllForSalesCount($filters['organization_id']);

        $query->setHint('knp_paginator.count', $count);

        return $query;
    }

    public function getAllForSalesCount($organizationId)
    {
        $count = $this->getEntityManager()
            ->createQuery('SELECT COUNT(h.id) FROM ListsHandlingBundle:Handling h WHERE h.organization_id = :organizationId')
            ->setParameter(':organizationId', $organizationId)
            ->getSingleScalarResult();

        return $count;
    }

    /**
     * Processes sql query depending on filters
     *
     * @param \Doctrine\ORM\QueryBuilder $sql
     * @param mixed[] $filters
     */
    public function processFilters(\Doctrine\ORM\QueryBuilder $sql, $filters)
    {
        if (sizeof($filters))
        {

            foreach($filters as $key => $value)
            {
                if (!$value)
                {
                    continue;
                }
                switch($key)
                {
                    case 'organization_id':
                        $sql
                            ->andWhere("h.organization_id = :organizationId");

                        $sql->setParameter(':organizationId', $value);
                        break;
                    case 'scope':
                        if (isset($value[0]) && !$value[0])
                        {
                            break;
                        }
                        $sql->andWhere('scope.id in (:scopeIds)');
                        $sql->setParameter(':scopeIds', $value);
                        break;
                    case 'city':
                        if (isset($value[0]) && !$value[0])
                        {
                            break;
                        }
                        $sql->andWhere('c.id in (:cityIds)');
                        $sql->setParameter(':cityIds', $value);
                        break;
                    case 'users':
                        if (isset($value[0]) && !$value[0])
                        {
                            break;
                        }
                        $sql->andWhere('users.id in (:userIds)');
                        $sql->setParameter(':userIds', $value);
                        break;
                }
            }
        }
    }

    public function getHandlingShow($id)
    {
       return $this->createQueryBuilder('h')
           ->select('h')
           ->addSelect('o.name as organizationName')
           ->addSelect("CONCAT(CONCAT(u.lastName, ' '), u.firstName) as creatorFullName")
           ->leftJoin('h.organization', 'o')
           ->leftJoin('h.user', 'u')
           ->where('h.id = :id')
           ->setParameter(':id', $id)
           ->getQuery()
           ->getSingleResult();
    }

    public function getOrganizationByHandlingId($handlingId)
    {
        $sql = $this->createQueryBuilder('h')
            ->where('h.id = :handlingId')
            ->setParameter(':handlingId', $handlingId)
            ->getQuery()
            ->getSingleResult();

        return $sql->getOrganizationId();
    }
}
