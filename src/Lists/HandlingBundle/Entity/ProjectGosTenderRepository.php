<?php

namespace Lists\HandlingBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProjectGosTenderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectGosTenderRepository extends EntityRepository
{
    
    /**
     * getListGosTender
     * 
     * @param User   $user
     * @param string $status active|closed
     *
     * @return Query
     */
    public function getListGosTender($user, $status)
    {

        /** @var \Doctrine\ORM\QueryBuilder $sql */
        $sql = $this->createQueryBuilder('t');
        /** @var \Doctrine\ORM\QueryBuilder $sqlCount */
        $sqlCount = $this->createQueryBuilder('t');
        
        // select
        $sqlCount->select('COUNT(DISTINCT t.id)');
        
        //join
        $sql->innerJoin('t.project', 'p');
        $sqlCount->innerJoin('t.project', 'p');
        
        //where
        if ($status == 'active') {
            $sql->where('p.isClosed = false');
            $sqlCount->where('p.isClosed = false');
        } elseif ($status == 'closed') {
            $sql->where('p.isClosed = true');
            $sqlCount->where('p.isClosed = true');
        }
        if ($user) {
            $sql->leftJoin('p.handlingUsers', 'hu')
                ->andWhere('hu.user = :user')
                ->setParameter(':user', $user);
            $sqlCount->leftJoin('p.handlingUsers', 'hu')
                ->andWhere('hu.user = :user')
                ->setParameter(':user', $user);
        }
        

        $query = $sql->getQuery();
        $count = $sqlCount->getQuery()->getSingleScalarResult();

        $query->setHint('knp_paginator.count', $count);

        return $query;
    }
    /**
     * getGosTender
     * 
     * @param integer $id
     *
     * @return Query
     */
    public function getGosTender($id)
    {
        /** @var \Doctrine\ORM\QueryBuilder $sql */
        $sql = $this->createQueryBuilder('t');

        //join
        $sql->innerJoin('t.project', 'p');
        
        // where
        $sql->where('t.id = :id')
            ->setParameter(':id', $id);

        $query = $sql->getQuery();

        return $query->getSingleResult();
    }
    /**
     * getListForDate
     * 
     * @param integer $startTimestamp
     * @param integer $endTimestamp
     * @param User    $user
     * 
     * @return mixed[]
     */
    public function getListForDate ($startTimestamp, $endTimestamp, $user)
    {
        $res = $this->createQueryBuilder('t');

        /** where */
        $res->where('t.datetimeOpening >= :startTimestamp');
        $res->andWhere('t.datetimeOpening <= :endTimestamp');
        $res->setParameter(':startTimestamp', date('Y-m-d H:i:s', $startTimestamp))
            ->setParameter(':endTimestamp', date('Y-m-d H:i:s', $endTimestamp));
        if ($user) {
            $res
                ->innerJoin('t.project', 'p')
                ->leftJoin('p.handlingUsers', 'hu')
                ->andWhere('hu.user = :user')
                ->setParameter(':user', $user);
        }

        return $res->getQuery()->getResult();
    }
}
