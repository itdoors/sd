<?php

namespace Lists\TeamBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeamRepository extends EntityRepository
{
    /**
     * Returns my teams list query
     *
     * @param int $userId
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getMyTeamsQuery($userId)
    {
        $sql = $this->createQueryBuilder('t')
            ->select('t')
            ->addSelect(
                "
                array_to_string(
                   ARRAY(
                      SELECT
                        CONCAT(CONCAT(u.lastName, ' '), u.firstName)
                      FROM
                        SDUserBundle:User u
                      LEFT JOIN u.teams tu
                      WHERE tu.id = t.id
                   ), ', '
                 ) as fullNames"
            )
            ->leftJoin('t.owner', 'owner')
            ->leftJoin('t.users', 'users')
            ->where('owner.id = :userId OR users.id = :userId')
            ->setParameter(':userId', $userId);

        return $sql;
    }

    /**
     * Get my teamIds
     *
     * @param \SD\UserBundle\Entity\User $user
     *
     * @return mixed[]
     */
    public function getMyTeamIdsByUser(\SD\UserBundle\Entity\User $user)
    {
        $sql = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('DISTINCT(user.id) as userId')
            ->from('SDUserBundle:User', 'user')
            ->leftJoin('user.teams', 'teams')
            ->leftJoin('teams.owner', 'owner')
            ->where('owner.id = :ownerId')
            ->setParameter(':ownerId', $user->getId())
            ->getQuery()
            ->getArrayResult();

        if (!sizeof($sql)) {
            return array($user->getId());
        }

        return $sql;
    }
}
