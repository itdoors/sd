<?php

namespace Lists\ContactBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ModelContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModelContactRepository extends EntityRepository
{
    const MODEL_ORGANIZATION = 'organization';
    const MODEL_HANDLING = 'handling';

    public function getMyOrganizationsContacts($userIds, $organizationId)
    {
        if (is_array($userIds) && $userIds)
        {
            $userIds = array($userIds);
        }

        $sql = $this->createQueryBuilder('mc')
            ->select('mc')
            /*->select('mc.firstName as firstName')
            ->addSelect('mc.lastName as lastName')
            ->addSelect('mc.middleName as middleName')*/
            ->addSelect('o.name as organizationName')
            ->addSelect("CONCAT(CONCAT(u.lastName, ' '), u.firstName) as creatorFullName")
            ->leftJoin('mc.user', 'u')
            ->leftJoin('ListsOrganizationBundle:Organization', 'o', 'WITH', 'o.id = mc.modelId')
            ->leftJoin('o.users', 'users')
            ->where('mc.modelName = :modelName')
            ->andWhere('o.id = mc.modelId')
            ->andWhere('users.id in (:userIds)')
            ->orderBy('o.name')
            ->setParameter(':userIds', $userIds)
            ->setParameter(':modelName', self::MODEL_ORGANIZATION);

        if ($organizationId && $organizationId != 0)
        {
            $sql
                ->andWhere('o.id = :organizationId')
                ->setParameter(':organizationId', $organizationId);
        }

        return $sql;
    }

    public function getMyHandlingContacts($userIds, $handlingId)
    {
        $organizationId = $this->getEntityManager()
            ->getRepository('ListsHandlingBundle:Handling')
            ->getOrganizationByHandlingId($handlingId);

        $sql = $this->createQueryBuilder('mc')
            ->select('mc')
            ->addSelect("CONCAT(CONCAT(u.lastName, ' '), u.firstName) as creatorFullName")
            ->leftJoin('mc.user', 'u')
            ->where('mc.modelName = :modelName')
            ->andWhere('mc.modelId = :modelId')
            //->andWhere('mc.user_id in (:userIds)')
            //->setParameter(':userIds', $userIds)
            ->setParameter(':modelId', $organizationId)
            ->setParameter(':modelName', self::MODEL_ORGANIZATION);

        return $sql;
    }
}
