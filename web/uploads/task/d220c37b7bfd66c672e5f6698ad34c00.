
CREATE OR REPLACE FUNCTION public.update_delete_log()
RETURNS TRIGGER AS
$$
    DECLARE each_column RECORD;
    DECLARE each_entity RECORD;
    DECLARE column_name VARCHAR;
    DECLARE old_value VARCHAR;
    DECLARE new_value VARCHAR;
    DECLARE pkey_column_name VARCHAR;
    DECLARE pkey_value VARCHAR;
BEGIN
    SELECT 
        INTO pkey_column_name
        kcu.column_name
    FROM 
        information_schema.table_constraints AS tc 
        JOIN information_schema.key_column_usage AS kcu 
        ON tc.constraint_name = kcu.constraint_name
        JOIN information_schema.constraint_column_usage AS ccu 
        ON ccu.constraint_name = tc.constraint_name
    WHERE 
        constraint_type = 'PRIMARY KEY' 
    AND 
        ccu.table_name=tg_relname;

    FOR each_column IN
        SELECT 
            attname AS column_name 
        FROM 
            pg_attribute 
        WHERE 
            attrelid = 
            (
                SELECT 
                    oid 
                FROM 
                    pg_class 
                WHERE 
                    relname = tg_relname
            )
        AND attnum > 0
    LOOP
 IF (TG_OP = 'UPDATE') THEN
        FOR each_entity IN
            EXECUTE 'SELECT text("' || each_column.column_name || '") as old_val, 
 
                text((' || QUOTE_LITERAL(NEW) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || each_column.column_name || '") 
                AS new_val, 
 
                text((' || QUOTE_LITERAL(OLD) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || pkey_column_name || '") 
                AS pk_val 
 
                FROM "' || tg_table_schema || '"."' || tg_relname || '" WHERE "' || pkey_column_name ||  '"= 
                (' || QUOTE_LITERAL(OLD) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || pkey_column_name || '";'
        LOOP
 
            old_value = each_entity.old_val;
            new_value =  each_entity.new_val;
            pkey_value = each_entity.pk_val;
 
            IF old_value != new_value  THEN
 
                INSERT INTO public.log
                (
                    action,
                    table_name,
                    schema_name, 
                    pkey_id, 
                    column_name, 
                    old_val, 
                    new_val
                ) 
                VALUES 
                (
                    tg_op, 
                    tg_relname, 
                    tg_table_schema, 
                    pkey_value, 
                    each_column.column_name, 
                    old_value,
                    new_value
                );
            END IF;
        END LOOP;
ELSIF (TG_OP = 'DELETE') THEN 
        FOR each_entity IN
            EXECUTE 'SELECT text("' || each_column.column_name || '") as old_val,
 
                text((' || QUOTE_LITERAL(OLD) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || pkey_column_name || '") 
                AS pk_val 
 
                FROM "' || tg_table_schema || '"."' || tg_relname || '" WHERE "' || pkey_column_name ||  '"= 
                (' || QUOTE_LITERAL(OLD) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || pkey_column_name || '";'
        LOOP
 
            old_value = each_entity.old_val;
            new_value =  'deleted';
            pkey_value = each_entity.pk_val;
 
            IF old_value != new_value  THEN
 
                INSERT INTO public.log
                (
                    action,
                    table_name,
                    schema_name, 
                    pkey_id, 
                    column_name, 
                    old_val, 
                    new_val
                ) 
                VALUES 
                (
                    tg_op, 
                    tg_relname, 
                    tg_table_schema, 
                    pkey_value, 
                    each_column.column_name, 
                    old_value,
                    new_value
                );
            END IF;
        END LOOP;
ELSIF (TG_OP = 'INSERT') THEN
        FOR each_entity IN
            EXECUTE 'SELECT
 
                text((' || QUOTE_LITERAL(NEW) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || each_column.column_name || '") 
                AS new_val, 
 
                text((' || QUOTE_LITERAL(NEW) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || pkey_column_name || '") 
                AS pk_val 
 
                FROM "' || tg_table_schema || '"."' || tg_relname || '" WHERE "' || pkey_column_name ||  '"= 
                (' || QUOTE_LITERAL(NEW) || '::"' || tg_table_schema || '"."' || tg_relname || '")."'  || pkey_column_name || '";'
        LOOP
 
            old_value = 'inserted';
            new_value =  each_entity.new_val;
            pkey_value = each_entity.pk_val;
 
            IF old_value != new_value  THEN
 
                INSERT INTO public.log
                (
                    action,
                    table_name,
                    schema_name, 
                    pkey_id, 
                    column_name, 
                    old_val, 
                    new_val
                ) 
                VALUES 
                (
                    tg_op, 
                    tg_relname, 
                    tg_table_schema, 
                    pkey_value, 
                    each_column.column_name, 
                    old_value,
                    new_value
                );
            END IF;
        END LOOP;

END IF;
    END LOOP;

    RETURN NEW;
END
$$
LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_delete_logs_department_people_trigger ON department_people;
DROP TRIGGER IF EXISTS insert_logs_department_people_trigger ON department_people;

DROP TRIGGER IF EXISTS update_delete_logs_department_people_month_info_trigger ON department_people_month_info;
DROP TRIGGER IF EXISTS insert_logs_department_people_month_info_trigger ON department_people_month_info;

DROP TRIGGER IF EXISTS update_delete_logs_individual_trigger ON individual;
DROP TRIGGER IF EXISTS insert_logs_individual_trigger ON individual;

DROP TRIGGER IF EXISTS update_delete_logs_grafik_trigger ON grafik;
DROP TRIGGER IF EXISTS insert_logs_grafik_trigger ON grafik;
--update and delete triggers
CREATE TRIGGER update_delete_logs_department_people_trigger
BEFORE UPDATE OR DELETE
ON department_people
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();

CREATE TRIGGER update_delete_logs_department_people_month_info_trigger
BEFORE UPDATE OR DELETE
ON department_people_month_info
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();

CREATE TRIGGER update_delete_logs_individual_trigger
BEFORE UPDATE OR DELETE
ON individual
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();

CREATE TRIGGER update_delete_logs_grafik_trigger
BEFORE UPDATE OR DELETE
ON grafik
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();
--insert triggers
CREATE TRIGGER insert_logs_department_people_trigger
AFTER INSERT
ON department_people
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();

CREATE TRIGGER insert_logs_department_people_month_info_trigger
AFTER INSERT
ON department_people_month_info
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();

CREATE TRIGGER insert_logs_individual_trigger
AFTER INSERT
ON individual
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();

CREATE TRIGGER insert_logs_grafik_trigger
AFTER INSERT
ON grafik
FOR EACH ROW EXECUTE PROCEDURE public.update_delete_log();





